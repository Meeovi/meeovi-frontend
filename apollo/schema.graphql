type agreements {
  id: ID!
  created: Date
  created_func: datetime_functions
  content: String
  name: String
  excerpt: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  type: JSON
  type_func: count_functions
  customers(filter: agreements_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [agreements_customers]
  customers_func: count_functions
  products(filter: agreements_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [agreements_products]
  products_func: count_functions
  shops(filter: shops_agreements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_agreements]
  shops_func: count_functions
}

type agreements_aggregated {
  group: JSON
  countAll: Int
  count: agreements_aggregated_count
  countDistinct: agreements_aggregated_count
}

type agreements_aggregated_count {
  id: Int
  created: Int
  content: Int
  name: Int
  excerpt: Int
  image: Int
  type: Int
  customers: Int
  products: Int
  shops: Int
}

type agreements_customers {
  id: ID!
  agreements_id(filter: agreements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): agreements
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type agreements_customers_aggregated {
  group: JSON
  countAll: Int
  count: agreements_customers_aggregated_count
  countDistinct: agreements_customers_aggregated_count
  avg: agreements_customers_aggregated_fields
  sum: agreements_customers_aggregated_fields
  avgDistinct: agreements_customers_aggregated_fields
  sumDistinct: agreements_customers_aggregated_fields
  min: agreements_customers_aggregated_fields
  max: agreements_customers_aggregated_fields
}

type agreements_customers_aggregated_count {
  id: Int
  agreements_id: Int
  customers_id: Int
}

type agreements_customers_aggregated_fields {
  id: Float
  agreements_id: Float
  customers_id: Float
}

input agreements_customers_filter {
  id: number_filter_operators
  agreements_id: agreements_filter
  customers_id: customers_filter
  _and: [agreements_customers_filter]
  _or: [agreements_customers_filter]
}

type agreements_customers_mutated {
  key: ID!
  event: EventEnum
  data: agreements_customers
}

input agreements_filter {
  id: number_filter_operators
  created: date_filter_operators
  created_func: datetime_function_filter_operators
  content: string_filter_operators
  name: string_filter_operators
  excerpt: string_filter_operators
  image: directus_files_filter
  type: string_filter_operators
  type_func: count_function_filter_operators
  customers: agreements_customers_filter
  customers_func: count_function_filter_operators
  products: agreements_products_filter
  products_func: count_function_filter_operators
  shops: shops_agreements_filter
  shops_func: count_function_filter_operators
  _and: [agreements_filter]
  _or: [agreements_filter]
}

type agreements_mutated {
  key: ID!
  event: EventEnum
  data: agreements
}

type agreements_products {
  id: ID!
  agreements_id(filter: agreements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): agreements
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type agreements_products_aggregated {
  group: JSON
  countAll: Int
  count: agreements_products_aggregated_count
  countDistinct: agreements_products_aggregated_count
  avg: agreements_products_aggregated_fields
  sum: agreements_products_aggregated_fields
  avgDistinct: agreements_products_aggregated_fields
  sumDistinct: agreements_products_aggregated_fields
  min: agreements_products_aggregated_fields
  max: agreements_products_aggregated_fields
}

type agreements_products_aggregated_count {
  id: Int
  agreements_id: Int
  products_id: Int
}

type agreements_products_aggregated_fields {
  id: Float
  agreements_id: Float
  products_id: Float
}

input agreements_products_filter {
  id: number_filter_operators
  agreements_id: agreements_filter
  products_id: products_filter
  _and: [agreements_products_filter]
  _or: [agreements_products_filter]
}

type agreements_products_mutated {
  key: ID!
  event: EventEnum
  data: agreements_products
}

type articles {
  id: ID!
  name: String
  excerpt: String
  content: String
  created_at: Date
  created_at_func: datetime_functions
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  type: JSON
  type_func: count_functions
  isPublic: Boolean
  categories(filter: articles_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles_categories]
  categories_func: count_functions
  departments(filter: articles_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles_departments]
  departments_func: count_functions
  comments(filter: articles_comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles_comments]
  comments_func: count_functions
  tags(filter: tags_articles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_articles]
  tags_func: count_functions
  customers(filter: articles_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles_customers]
  customers_func: count_functions
}

type articles_aggregated {
  group: JSON
  countAll: Int
  count: articles_aggregated_count
  countDistinct: articles_aggregated_count
  avg: articles_aggregated_fields
  sum: articles_aggregated_fields
  avgDistinct: articles_aggregated_fields
  sumDistinct: articles_aggregated_fields
  min: articles_aggregated_fields
  max: articles_aggregated_fields
}

type articles_aggregated_count {
  id: Int
  name: Int
  excerpt: Int
  content: Int
  created_at: Int
  image: Int
  type: Int
  isPublic: Int
  categories: Int
  departments: Int
  comments: Int
  tags: Int
  customers: Int
}

type articles_aggregated_fields {
  id: Float
}

type articles_categories {
  id: ID!
  articles_id(filter: articles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): articles
  categories_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
}

type articles_categories_aggregated {
  group: JSON
  countAll: Int
  count: articles_categories_aggregated_count
  countDistinct: articles_categories_aggregated_count
  avg: articles_categories_aggregated_fields
  sum: articles_categories_aggregated_fields
  avgDistinct: articles_categories_aggregated_fields
  sumDistinct: articles_categories_aggregated_fields
  min: articles_categories_aggregated_fields
  max: articles_categories_aggregated_fields
}

type articles_categories_aggregated_count {
  id: Int
  articles_id: Int
  categories_id: Int
}

type articles_categories_aggregated_fields {
  id: Float
  articles_id: Float
  categories_id: Float
}

input articles_categories_filter {
  id: number_filter_operators
  articles_id: articles_filter
  categories_id: categories_filter
  _and: [articles_categories_filter]
  _or: [articles_categories_filter]
}

type articles_categories_mutated {
  key: ID!
  event: EventEnum
  data: articles_categories
}

type articles_comments {
  id: ID!
  articles_id(filter: articles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): articles
  comments_id(filter: comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): comments
}

type articles_comments_aggregated {
  group: JSON
  countAll: Int
  count: articles_comments_aggregated_count
  countDistinct: articles_comments_aggregated_count
  avg: articles_comments_aggregated_fields
  sum: articles_comments_aggregated_fields
  avgDistinct: articles_comments_aggregated_fields
  sumDistinct: articles_comments_aggregated_fields
  min: articles_comments_aggregated_fields
  max: articles_comments_aggregated_fields
}

type articles_comments_aggregated_count {
  id: Int
  articles_id: Int
  comments_id: Int
}

type articles_comments_aggregated_fields {
  id: Float
  articles_id: Float
  comments_id: Float
}

input articles_comments_filter {
  id: number_filter_operators
  articles_id: articles_filter
  comments_id: comments_filter
  _and: [articles_comments_filter]
  _or: [articles_comments_filter]
}

type articles_comments_mutated {
  key: ID!
  event: EventEnum
  data: articles_comments
}

type articles_customers {
  id: ID!
  articles_id(filter: articles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): articles
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type articles_customers_aggregated {
  group: JSON
  countAll: Int
  count: articles_customers_aggregated_count
  countDistinct: articles_customers_aggregated_count
  avg: articles_customers_aggregated_fields
  sum: articles_customers_aggregated_fields
  avgDistinct: articles_customers_aggregated_fields
  sumDistinct: articles_customers_aggregated_fields
  min: articles_customers_aggregated_fields
  max: articles_customers_aggregated_fields
}

type articles_customers_aggregated_count {
  id: Int
  articles_id: Int
  customers_id: Int
}

type articles_customers_aggregated_fields {
  id: Float
  articles_id: Float
  customers_id: Float
}

input articles_customers_filter {
  id: number_filter_operators
  articles_id: articles_filter
  customers_id: customers_filter
  _and: [articles_customers_filter]
  _or: [articles_customers_filter]
}

type articles_customers_mutated {
  key: ID!
  event: EventEnum
  data: articles_customers
}

type articles_departments {
  id: ID!
  articles_id(filter: articles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): articles
  departments_id(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): departments
}

type articles_departments_aggregated {
  group: JSON
  countAll: Int
  count: articles_departments_aggregated_count
  countDistinct: articles_departments_aggregated_count
  avg: articles_departments_aggregated_fields
  sum: articles_departments_aggregated_fields
  avgDistinct: articles_departments_aggregated_fields
  sumDistinct: articles_departments_aggregated_fields
  min: articles_departments_aggregated_fields
  max: articles_departments_aggregated_fields
}

type articles_departments_aggregated_count {
  id: Int
  articles_id: Int
  departments_id: Int
}

type articles_departments_aggregated_fields {
  id: Float
  articles_id: Float
  departments_id: Float
}

input articles_departments_filter {
  id: number_filter_operators
  articles_id: articles_filter
  departments_id: departments_filter
  _and: [articles_departments_filter]
  _or: [articles_departments_filter]
}

type articles_departments_mutated {
  key: ID!
  event: EventEnum
  data: articles_departments
}

input articles_filter {
  id: number_filter_operators
  name: string_filter_operators
  excerpt: string_filter_operators
  content: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  image: directus_files_filter
  type: string_filter_operators
  type_func: count_function_filter_operators
  isPublic: boolean_filter_operators
  categories: articles_categories_filter
  categories_func: count_function_filter_operators
  departments: articles_departments_filter
  departments_func: count_function_filter_operators
  comments: articles_comments_filter
  comments_func: count_function_filter_operators
  tags: tags_articles_filter
  tags_func: count_function_filter_operators
  customers: articles_customers_filter
  customers_func: count_function_filter_operators
  _and: [articles_filter]
  _or: [articles_filter]
}

type articles_mutated {
  key: ID!
  event: EventEnum
  data: articles
}

type attributes {
  id: ID!
  default_label: String
  attribute_code: String
  isPublic: Boolean
  products(filter: attributes_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [attributes_products]
  products_func: count_functions
}

type attributes_aggregated {
  group: JSON
  countAll: Int
  count: attributes_aggregated_count
  countDistinct: attributes_aggregated_count
  avg: attributes_aggregated_fields
  sum: attributes_aggregated_fields
  avgDistinct: attributes_aggregated_fields
  sumDistinct: attributes_aggregated_fields
  min: attributes_aggregated_fields
  max: attributes_aggregated_fields
}

type attributes_aggregated_count {
  id: Int
  default_label: Int
  attribute_code: Int
  isPublic: Int
  products: Int
}

type attributes_aggregated_fields {
  id: Float
}

input attributes_filter {
  id: number_filter_operators
  default_label: string_filter_operators
  attribute_code: string_filter_operators
  isPublic: boolean_filter_operators
  products: attributes_products_filter
  products_func: count_function_filter_operators
  _and: [attributes_filter]
  _or: [attributes_filter]
}

type attributes_mutated {
  key: ID!
  event: EventEnum
  data: attributes
}

type attributes_products {
  id: ID!
  attributes_id(filter: attributes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): attributes
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type attributes_products_aggregated {
  group: JSON
  countAll: Int
  count: attributes_products_aggregated_count
  countDistinct: attributes_products_aggregated_count
  avg: attributes_products_aggregated_fields
  sum: attributes_products_aggregated_fields
  avgDistinct: attributes_products_aggregated_fields
  sumDistinct: attributes_products_aggregated_fields
  min: attributes_products_aggregated_fields
  max: attributes_products_aggregated_fields
}

type attributes_products_aggregated_count {
  id: Int
  attributes_id: Int
  products_id: Int
}

type attributes_products_aggregated_fields {
  id: Float
  attributes_id: Float
  products_id: Float
}

input attributes_products_filter {
  id: number_filter_operators
  attributes_id: attributes_filter
  products_id: products_filter
  _and: [attributes_products_filter]
  _or: [attributes_products_filter]
}

type attributes_products_mutated {
  key: ID!
  event: EventEnum
  data: attributes_products
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _null: Boolean
  _nnull: Boolean
}

type brands {
  id: ID!
  created_at: Date
  created_at_func: datetime_functions
  code: String
  name: String
  description: String
  image: String
  manufacturer(filter: brands_manufacturer_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_manufacturer]
  manufacturer_func: count_functions
  categories(filter: brands_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_categories]
  categories_func: count_functions
  collections(filter: collections_brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [collections_brands]
  collections_func: count_functions
  departments(filter: brands_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_departments]
  departments_func: count_functions
  customers(filter: brands_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_customers]
  customers_func: count_functions
  shorts(filter: brands_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_shorts]
  shorts_func: count_functions
  products(filter: brands_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_products]
  products_func: count_functions
}

type brands_aggregated {
  group: JSON
  countAll: Int
  count: brands_aggregated_count
  countDistinct: brands_aggregated_count
}

type brands_aggregated_count {
  id: Int
  created_at: Int
  code: Int
  name: Int
  description: Int
  image: Int
  manufacturer: Int
  categories: Int
  collections: Int
  departments: Int
  customers: Int
  shorts: Int
  products: Int
}

type brands_categories {
  id: ID!
  brands_id(filter: brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): brands
  categories_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
}

type brands_categories_aggregated {
  group: JSON
  countAll: Int
  count: brands_categories_aggregated_count
  countDistinct: brands_categories_aggregated_count
  avg: brands_categories_aggregated_fields
  sum: brands_categories_aggregated_fields
  avgDistinct: brands_categories_aggregated_fields
  sumDistinct: brands_categories_aggregated_fields
  min: brands_categories_aggregated_fields
  max: brands_categories_aggregated_fields
}

type brands_categories_aggregated_count {
  id: Int
  brands_id: Int
  categories_id: Int
}

type brands_categories_aggregated_fields {
  id: Float
  brands_id: Float
  categories_id: Float
}

input brands_categories_filter {
  id: number_filter_operators
  brands_id: brands_filter
  categories_id: categories_filter
  _and: [brands_categories_filter]
  _or: [brands_categories_filter]
}

type brands_categories_mutated {
  key: ID!
  event: EventEnum
  data: brands_categories
}

type brands_customers {
  id: ID!
  brands_id(filter: brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): brands
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type brands_customers_aggregated {
  group: JSON
  countAll: Int
  count: brands_customers_aggregated_count
  countDistinct: brands_customers_aggregated_count
  avg: brands_customers_aggregated_fields
  sum: brands_customers_aggregated_fields
  avgDistinct: brands_customers_aggregated_fields
  sumDistinct: brands_customers_aggregated_fields
  min: brands_customers_aggregated_fields
  max: brands_customers_aggregated_fields
}

type brands_customers_aggregated_count {
  id: Int
  brands_id: Int
  customers_id: Int
}

type brands_customers_aggregated_fields {
  id: Float
  brands_id: Float
  customers_id: Float
}

input brands_customers_filter {
  id: number_filter_operators
  brands_id: brands_filter
  customers_id: customers_filter
  _and: [brands_customers_filter]
  _or: [brands_customers_filter]
}

type brands_customers_mutated {
  key: ID!
  event: EventEnum
  data: brands_customers
}

type brands_departments {
  id: ID!
  brands_id(filter: brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): brands
  departments_id(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): departments
}

type brands_departments_aggregated {
  group: JSON
  countAll: Int
  count: brands_departments_aggregated_count
  countDistinct: brands_departments_aggregated_count
  avg: brands_departments_aggregated_fields
  sum: brands_departments_aggregated_fields
  avgDistinct: brands_departments_aggregated_fields
  sumDistinct: brands_departments_aggregated_fields
  min: brands_departments_aggregated_fields
  max: brands_departments_aggregated_fields
}

type brands_departments_aggregated_count {
  id: Int
  brands_id: Int
  departments_id: Int
}

type brands_departments_aggregated_fields {
  id: Float
  brands_id: Float
  departments_id: Float
}

input brands_departments_filter {
  id: number_filter_operators
  brands_id: brands_filter
  departments_id: departments_filter
  _and: [brands_departments_filter]
  _or: [brands_departments_filter]
}

type brands_departments_mutated {
  key: ID!
  event: EventEnum
  data: brands_departments
}

input brands_filter {
  id: number_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  code: string_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  image: string_filter_operators
  manufacturer: brands_manufacturer_filter
  manufacturer_func: count_function_filter_operators
  categories: brands_categories_filter
  categories_func: count_function_filter_operators
  collections: collections_brands_filter
  collections_func: count_function_filter_operators
  departments: brands_departments_filter
  departments_func: count_function_filter_operators
  customers: brands_customers_filter
  customers_func: count_function_filter_operators
  shorts: brands_shorts_filter
  shorts_func: count_function_filter_operators
  products: brands_products_filter
  products_func: count_function_filter_operators
  _and: [brands_filter]
  _or: [brands_filter]
}

type brands_manufacturer {
  id: ID!
  brands_id(filter: brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): brands
  manufacturer_id(filter: manufacturer_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): manufacturer
}

type brands_manufacturer_aggregated {
  group: JSON
  countAll: Int
  count: brands_manufacturer_aggregated_count
  countDistinct: brands_manufacturer_aggregated_count
  avg: brands_manufacturer_aggregated_fields
  sum: brands_manufacturer_aggregated_fields
  avgDistinct: brands_manufacturer_aggregated_fields
  sumDistinct: brands_manufacturer_aggregated_fields
  min: brands_manufacturer_aggregated_fields
  max: brands_manufacturer_aggregated_fields
}

type brands_manufacturer_aggregated_count {
  id: Int
  brands_id: Int
  manufacturer_id: Int
}

type brands_manufacturer_aggregated_fields {
  id: Float
  brands_id: Float
  manufacturer_id: Float
}

input brands_manufacturer_filter {
  id: number_filter_operators
  brands_id: brands_filter
  manufacturer_id: manufacturer_filter
  _and: [brands_manufacturer_filter]
  _or: [brands_manufacturer_filter]
}

type brands_manufacturer_mutated {
  key: ID!
  event: EventEnum
  data: brands_manufacturer
}

type brands_mutated {
  key: ID!
  event: EventEnum
  data: brands
}

type brands_products {
  id: ID!
  brands_id(filter: brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): brands
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type brands_products_aggregated {
  group: JSON
  countAll: Int
  count: brands_products_aggregated_count
  countDistinct: brands_products_aggregated_count
  avg: brands_products_aggregated_fields
  sum: brands_products_aggregated_fields
  avgDistinct: brands_products_aggregated_fields
  sumDistinct: brands_products_aggregated_fields
  min: brands_products_aggregated_fields
  max: brands_products_aggregated_fields
}

type brands_products_aggregated_count {
  id: Int
  brands_id: Int
  products_id: Int
}

type brands_products_aggregated_fields {
  id: Float
  brands_id: Float
  products_id: Float
}

input brands_products_filter {
  id: number_filter_operators
  brands_id: brands_filter
  products_id: products_filter
  _and: [brands_products_filter]
  _or: [brands_products_filter]
}

type brands_products_mutated {
  key: ID!
  event: EventEnum
  data: brands_products
}

type brands_shorts {
  id: ID!
  brands_id(filter: brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): brands
  shorts_id(filter: shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shorts
}

type brands_shorts_aggregated {
  group: JSON
  countAll: Int
  count: brands_shorts_aggregated_count
  countDistinct: brands_shorts_aggregated_count
  avg: brands_shorts_aggregated_fields
  sum: brands_shorts_aggregated_fields
  avgDistinct: brands_shorts_aggregated_fields
  sumDistinct: brands_shorts_aggregated_fields
  min: brands_shorts_aggregated_fields
  max: brands_shorts_aggregated_fields
}

type brands_shorts_aggregated_count {
  id: Int
  brands_id: Int
  shorts_id: Int
}

type brands_shorts_aggregated_fields {
  id: Float
  brands_id: Float
  shorts_id: Float
}

input brands_shorts_filter {
  id: number_filter_operators
  brands_id: brands_filter
  shorts_id: shorts_filter
  _and: [brands_shorts_filter]
  _or: [brands_shorts_filter]
}

type brands_shorts_mutated {
  key: ID!
  event: EventEnum
  data: brands_shorts
}

type careers {
  id: ID!
  status: String
  sort: Int
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  url: String
  description: String
  type: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  degree_level: String
  experience: String
  customers(filter: careers_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [careers_customers]
  customers_func: count_functions
}

type careers_aggregated {
  group: JSON
  countAll: Int
  count: careers_aggregated_count
  countDistinct: careers_aggregated_count
  avg: careers_aggregated_fields
  sum: careers_aggregated_fields
  avgDistinct: careers_aggregated_fields
  sumDistinct: careers_aggregated_fields
  min: careers_aggregated_fields
  max: careers_aggregated_fields
}

type careers_aggregated_count {
  id: Int
  status: Int
  sort: Int
  date_created: Int
  date_updated: Int
  name: Int
  url: Int
  description: Int
  type: Int
  image: Int
  degree_level: Int
  experience: Int
  customers: Int
}

type careers_aggregated_fields {
  id: Float
  sort: Float
}

type careers_customers {
  id: ID!
  careers_id(filter: careers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): careers
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type careers_customers_aggregated {
  group: JSON
  countAll: Int
  count: careers_customers_aggregated_count
  countDistinct: careers_customers_aggregated_count
  avg: careers_customers_aggregated_fields
  sum: careers_customers_aggregated_fields
  avgDistinct: careers_customers_aggregated_fields
  sumDistinct: careers_customers_aggregated_fields
  min: careers_customers_aggregated_fields
  max: careers_customers_aggregated_fields
}

type careers_customers_aggregated_count {
  id: Int
  careers_id: Int
  customers_id: Int
}

type careers_customers_aggregated_fields {
  id: Float
  careers_id: Float
  customers_id: Float
}

input careers_customers_filter {
  id: number_filter_operators
  careers_id: careers_filter
  customers_id: customers_filter
  _and: [careers_customers_filter]
  _or: [careers_customers_filter]
}

type careers_customers_mutated {
  key: ID!
  event: EventEnum
  data: careers_customers
}

input careers_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  url: string_filter_operators
  description: string_filter_operators
  type: string_filter_operators
  image: directus_files_filter
  degree_level: string_filter_operators
  experience: string_filter_operators
  customers: careers_customers_filter
  customers_func: count_function_filter_operators
  _and: [careers_filter]
  _or: [careers_filter]
}

type careers_mutated {
  key: ID!
  event: EventEnum
  data: careers
}

type categories {
  id: ID!
  name: String
  description: String
  content: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  brands(filter: brands_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_categories]
  brands_func: count_functions
  digiboard(filter: digiboard_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [digiboard_categories]
  digiboard_func: count_functions
  products(filter: products_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_categories]
  products_func: count_functions
  shorts(filter: categories_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [categories_shorts]
  shorts_func: count_functions
  customers(filter: categories_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [categories_customers]
  customers_func: count_functions
  articles(filter: articles_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles_categories]
  articles_func: count_functions
  departments(filter: departments_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments_categories]
  departments_func: count_functions
  tags(filter: tags_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_categories]
  tags_func: count_functions
  meeovistores(filter: categories_meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [categories_meeovistores]
  meeovistores_func: count_functions
  musicchart(filter: musicchart_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [musicchart_categories]
  musicchart_func: count_functions
  shops(filter: shops_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_categories]
  shops_func: count_functions
}

type categories_aggregated {
  group: JSON
  countAll: Int
  count: categories_aggregated_count
  countDistinct: categories_aggregated_count
  avg: categories_aggregated_fields
  sum: categories_aggregated_fields
  avgDistinct: categories_aggregated_fields
  sumDistinct: categories_aggregated_fields
  min: categories_aggregated_fields
  max: categories_aggregated_fields
}

type categories_aggregated_count {
  id: Int
  name: Int
  description: Int
  content: Int
  image: Int
  brands: Int
  digiboard: Int
  products: Int
  shorts: Int
  customers: Int
  articles: Int
  departments: Int
  tags: Int
  meeovistores: Int
  musicchart: Int
  shops: Int
}

type categories_aggregated_fields {
  id: Float
}

type categories_customers {
  id: ID!
  categories_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type categories_customers_aggregated {
  group: JSON
  countAll: Int
  count: categories_customers_aggregated_count
  countDistinct: categories_customers_aggregated_count
  avg: categories_customers_aggregated_fields
  sum: categories_customers_aggregated_fields
  avgDistinct: categories_customers_aggregated_fields
  sumDistinct: categories_customers_aggregated_fields
  min: categories_customers_aggregated_fields
  max: categories_customers_aggregated_fields
}

type categories_customers_aggregated_count {
  id: Int
  categories_id: Int
  customers_id: Int
}

type categories_customers_aggregated_fields {
  id: Float
  categories_id: Float
  customers_id: Float
}

input categories_customers_filter {
  id: number_filter_operators
  categories_id: categories_filter
  customers_id: customers_filter
  _and: [categories_customers_filter]
  _or: [categories_customers_filter]
}

type categories_customers_mutated {
  key: ID!
  event: EventEnum
  data: categories_customers
}

type categories_departments {
  id: ID!
  categories_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
  departments_id(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): departments
}

type categories_departments_aggregated {
  group: JSON
  countAll: Int
  count: categories_departments_aggregated_count
  countDistinct: categories_departments_aggregated_count
  avg: categories_departments_aggregated_fields
  sum: categories_departments_aggregated_fields
  avgDistinct: categories_departments_aggregated_fields
  sumDistinct: categories_departments_aggregated_fields
  min: categories_departments_aggregated_fields
  max: categories_departments_aggregated_fields
}

type categories_departments_aggregated_count {
  id: Int
  categories_id: Int
  departments_id: Int
}

type categories_departments_aggregated_fields {
  id: Float
  categories_id: Float
  departments_id: Float
}

input categories_departments_filter {
  id: number_filter_operators
  categories_id: categories_filter
  departments_id: departments_filter
  _and: [categories_departments_filter]
  _or: [categories_departments_filter]
}

type categories_departments_mutated {
  key: ID!
  event: EventEnum
  data: categories_departments
}

input categories_filter {
  id: number_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  content: string_filter_operators
  image: directus_files_filter
  brands: brands_categories_filter
  brands_func: count_function_filter_operators
  digiboard: digiboard_categories_filter
  digiboard_func: count_function_filter_operators
  products: products_categories_filter
  products_func: count_function_filter_operators
  shorts: categories_shorts_filter
  shorts_func: count_function_filter_operators
  customers: categories_customers_filter
  customers_func: count_function_filter_operators
  articles: articles_categories_filter
  articles_func: count_function_filter_operators
  departments: departments_categories_filter
  departments_func: count_function_filter_operators
  tags: tags_categories_filter
  tags_func: count_function_filter_operators
  meeovistores: categories_meeovistores_filter
  meeovistores_func: count_function_filter_operators
  musicchart: musicchart_categories_filter
  musicchart_func: count_function_filter_operators
  shops: shops_categories_filter
  shops_func: count_function_filter_operators
  _and: [categories_filter]
  _or: [categories_filter]
}

type categories_meeovistores {
  id: ID!
  categories_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
  meeovistores_id(filter: meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): meeovistores
}

type categories_meeovistores_aggregated {
  group: JSON
  countAll: Int
  count: categories_meeovistores_aggregated_count
  countDistinct: categories_meeovistores_aggregated_count
  avg: categories_meeovistores_aggregated_fields
  sum: categories_meeovistores_aggregated_fields
  avgDistinct: categories_meeovistores_aggregated_fields
  sumDistinct: categories_meeovistores_aggregated_fields
  min: categories_meeovistores_aggregated_fields
  max: categories_meeovistores_aggregated_fields
}

type categories_meeovistores_aggregated_count {
  id: Int
  categories_id: Int
  meeovistores_id: Int
}

type categories_meeovistores_aggregated_fields {
  id: Float
  categories_id: Float
  meeovistores_id: Float
}

input categories_meeovistores_filter {
  id: number_filter_operators
  categories_id: categories_filter
  meeovistores_id: meeovistores_filter
  _and: [categories_meeovistores_filter]
  _or: [categories_meeovistores_filter]
}

type categories_meeovistores_mutated {
  key: ID!
  event: EventEnum
  data: categories_meeovistores
}

type categories_mutated {
  key: ID!
  event: EventEnum
  data: categories
}

type categories_shorts {
  id: ID!
  categories_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
  shorts_id(filter: shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shorts
}

type categories_shorts_aggregated {
  group: JSON
  countAll: Int
  count: categories_shorts_aggregated_count
  countDistinct: categories_shorts_aggregated_count
  avg: categories_shorts_aggregated_fields
  sum: categories_shorts_aggregated_fields
  avgDistinct: categories_shorts_aggregated_fields
  sumDistinct: categories_shorts_aggregated_fields
  min: categories_shorts_aggregated_fields
  max: categories_shorts_aggregated_fields
}

type categories_shorts_aggregated_count {
  id: Int
  categories_id: Int
  shorts_id: Int
}

type categories_shorts_aggregated_fields {
  id: Float
  categories_id: Float
  shorts_id: Float
}

input categories_shorts_filter {
  id: number_filter_operators
  categories_id: categories_filter
  shorts_id: shorts_filter
  _and: [categories_shorts_filter]
  _or: [categories_shorts_filter]
}

type categories_shorts_mutated {
  key: ID!
  event: EventEnum
  data: categories_shorts
}

type cities {
  id: ID!
  name: String!
  description: String
  postalCode: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  longitude: String
  latitude: String
  languagenames: String
  country(filter: cities_countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [cities_countries]
  country_func: count_functions
  customers(filter: cities_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [cities_customers]
  customers_func: count_functions
  states(filter: states_cities_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [states_cities]
  states_func: count_functions
}

type cities_aggregated {
  group: JSON
  countAll: Int
  count: cities_aggregated_count
  countDistinct: cities_aggregated_count
  avg: cities_aggregated_fields
  sum: cities_aggregated_fields
  avgDistinct: cities_aggregated_fields
  sumDistinct: cities_aggregated_fields
  min: cities_aggregated_fields
  max: cities_aggregated_fields
}

type cities_aggregated_count {
  id: Int
  name: Int
  description: Int
  postalCode: Int
  image: Int
  longitude: Int
  latitude: Int
  languagenames: Int
  country: Int
  customers: Int
  states: Int
}

type cities_aggregated_fields {
  id: Float
}

type cities_countries {
  id: ID!
  cities_id(filter: cities_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): cities
  countries_id(filter: countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): countries
}

type cities_countries_aggregated {
  group: JSON
  countAll: Int
  count: cities_countries_aggregated_count
  countDistinct: cities_countries_aggregated_count
  avg: cities_countries_aggregated_fields
  sum: cities_countries_aggregated_fields
  avgDistinct: cities_countries_aggregated_fields
  sumDistinct: cities_countries_aggregated_fields
  min: cities_countries_aggregated_fields
  max: cities_countries_aggregated_fields
}

type cities_countries_aggregated_count {
  id: Int
  cities_id: Int
  countries_id: Int
}

type cities_countries_aggregated_fields {
  id: Float
  cities_id: Float
  countries_id: Float
}

input cities_countries_filter {
  id: number_filter_operators
  cities_id: cities_filter
  countries_id: countries_filter
  _and: [cities_countries_filter]
  _or: [cities_countries_filter]
}

type cities_countries_mutated {
  key: ID!
  event: EventEnum
  data: cities_countries
}

type cities_customers {
  id: ID!
  cities_id(filter: cities_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): cities
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type cities_customers_aggregated {
  group: JSON
  countAll: Int
  count: cities_customers_aggregated_count
  countDistinct: cities_customers_aggregated_count
  avg: cities_customers_aggregated_fields
  sum: cities_customers_aggregated_fields
  avgDistinct: cities_customers_aggregated_fields
  sumDistinct: cities_customers_aggregated_fields
  min: cities_customers_aggregated_fields
  max: cities_customers_aggregated_fields
}

type cities_customers_aggregated_count {
  id: Int
  cities_id: Int
  customers_id: Int
}

type cities_customers_aggregated_fields {
  id: Float
  cities_id: Float
  customers_id: Float
}

input cities_customers_filter {
  id: number_filter_operators
  cities_id: cities_filter
  customers_id: customers_filter
  _and: [cities_customers_filter]
  _or: [cities_customers_filter]
}

type cities_customers_mutated {
  key: ID!
  event: EventEnum
  data: cities_customers
}

input cities_filter {
  id: number_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  postalCode: string_filter_operators
  image: directus_files_filter
  longitude: string_filter_operators
  latitude: string_filter_operators
  languagenames: string_filter_operators
  country: cities_countries_filter
  country_func: count_function_filter_operators
  customers: cities_customers_filter
  customers_func: count_function_filter_operators
  states: states_cities_filter
  states_func: count_function_filter_operators
  _and: [cities_filter]
  _or: [cities_filter]
}

type cities_mutated {
  key: ID!
  event: EventEnum
  data: cities
}

type cities_states {
  id: ID!
  cities_id(filter: cities_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): cities
}

type cities_states_aggregated {
  group: JSON
  countAll: Int
  count: cities_states_aggregated_count
  countDistinct: cities_states_aggregated_count
  avg: cities_states_aggregated_fields
  sum: cities_states_aggregated_fields
  avgDistinct: cities_states_aggregated_fields
  sumDistinct: cities_states_aggregated_fields
  min: cities_states_aggregated_fields
  max: cities_states_aggregated_fields
}

type cities_states_aggregated_count {
  id: Int
  cities_id: Int
}

type cities_states_aggregated_fields {
  id: Float
  cities_id: Float
}

input cities_states_filter {
  id: number_filter_operators
  cities_id: cities_filter
  _and: [cities_states_filter]
  _or: [cities_states_filter]
}

type cities_states_mutated {
  key: ID!
  event: EventEnum
  data: cities_states
}

type collections {
  id: ID!
  created_at: Date
  created_at_func: datetime_functions
  name: String
  description: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  type: JSON
  type_func: count_functions
  products(filter: collections_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [collections_products]
  products_func: count_functions
  brands(filter: collections_brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [collections_brands]
  brands_func: count_functions
  customers(filter: collections_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [collections_customers]
  customers_func: count_functions
  departments(filter: departments_collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments_collections]
  departments_func: count_functions
  meeovistores(filter: meeovistores_collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores_collections]
  meeovistores_func: count_functions
}

type collections_aggregated {
  group: JSON
  countAll: Int
  count: collections_aggregated_count
  countDistinct: collections_aggregated_count
}

type collections_aggregated_count {
  id: Int
  created_at: Int
  name: Int
  description: Int
  image: Int
  type: Int
  products: Int
  brands: Int
  customers: Int
  departments: Int
  meeovistores: Int
}

type collections_brands {
  id: ID!
  collections_id(filter: collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): collections
  brands_id(filter: brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): brands
}

type collections_brands_aggregated {
  group: JSON
  countAll: Int
  count: collections_brands_aggregated_count
  countDistinct: collections_brands_aggregated_count
  avg: collections_brands_aggregated_fields
  sum: collections_brands_aggregated_fields
  avgDistinct: collections_brands_aggregated_fields
  sumDistinct: collections_brands_aggregated_fields
  min: collections_brands_aggregated_fields
  max: collections_brands_aggregated_fields
}

type collections_brands_aggregated_count {
  id: Int
  collections_id: Int
  brands_id: Int
}

type collections_brands_aggregated_fields {
  id: Float
  collections_id: Float
  brands_id: Float
}

input collections_brands_filter {
  id: number_filter_operators
  collections_id: collections_filter
  brands_id: brands_filter
  _and: [collections_brands_filter]
  _or: [collections_brands_filter]
}

type collections_brands_mutated {
  key: ID!
  event: EventEnum
  data: collections_brands
}

type collections_customers {
  id: ID!
  collections_id(filter: collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): collections
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type collections_customers_aggregated {
  group: JSON
  countAll: Int
  count: collections_customers_aggregated_count
  countDistinct: collections_customers_aggregated_count
  avg: collections_customers_aggregated_fields
  sum: collections_customers_aggregated_fields
  avgDistinct: collections_customers_aggregated_fields
  sumDistinct: collections_customers_aggregated_fields
  min: collections_customers_aggregated_fields
  max: collections_customers_aggregated_fields
}

type collections_customers_aggregated_count {
  id: Int
  collections_id: Int
  customers_id: Int
}

type collections_customers_aggregated_fields {
  id: Float
  collections_id: Float
  customers_id: Float
}

input collections_customers_filter {
  id: number_filter_operators
  collections_id: collections_filter
  customers_id: customers_filter
  _and: [collections_customers_filter]
  _or: [collections_customers_filter]
}

type collections_customers_mutated {
  key: ID!
  event: EventEnum
  data: collections_customers
}

input collections_filter {
  id: number_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  image: directus_files_filter
  type: string_filter_operators
  type_func: count_function_filter_operators
  products: collections_products_filter
  products_func: count_function_filter_operators
  brands: collections_brands_filter
  brands_func: count_function_filter_operators
  customers: collections_customers_filter
  customers_func: count_function_filter_operators
  departments: departments_collections_filter
  departments_func: count_function_filter_operators
  meeovistores: meeovistores_collections_filter
  meeovistores_func: count_function_filter_operators
  _and: [collections_filter]
  _or: [collections_filter]
}

type collections_mutated {
  key: ID!
  event: EventEnum
  data: collections
}

type collections_products {
  id: ID!
  collections_id(filter: collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): collections
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type collections_products_aggregated {
  group: JSON
  countAll: Int
  count: collections_products_aggregated_count
  countDistinct: collections_products_aggregated_count
  avg: collections_products_aggregated_fields
  sum: collections_products_aggregated_fields
  avgDistinct: collections_products_aggregated_fields
  sumDistinct: collections_products_aggregated_fields
  min: collections_products_aggregated_fields
  max: collections_products_aggregated_fields
}

type collections_products_aggregated_count {
  id: Int
  collections_id: Int
  products_id: Int
}

type collections_products_aggregated_fields {
  id: Float
  collections_id: Float
  products_id: Float
}

input collections_products_filter {
  id: number_filter_operators
  collections_id: collections_filter
  products_id: products_filter
  _and: [collections_products_filter]
  _or: [collections_products_filter]
}

type collections_products_mutated {
  key: ID!
  event: EventEnum
  data: collections_products
}

type comments {
  id: ID!
  response: String
  media(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  customers(filter: comments_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [comments_customers]
  customers_func: count_functions
  shorts(filter: comments_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [comments_shorts]
  shorts_func: count_functions
  products(filter: comments_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [comments_products]
  products_func: count_functions
  articles(filter: articles_comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles_comments]
  articles_func: count_functions
  digiboard(filter: digiboard_comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [digiboard_comments]
  digiboard_func: count_functions
}

type comments_aggregated {
  group: JSON
  countAll: Int
  count: comments_aggregated_count
  countDistinct: comments_aggregated_count
  avg: comments_aggregated_fields
  sum: comments_aggregated_fields
  avgDistinct: comments_aggregated_fields
  sumDistinct: comments_aggregated_fields
  min: comments_aggregated_fields
  max: comments_aggregated_fields
}

type comments_aggregated_count {
  id: Int
  response: Int
  media: Int
  customers: Int
  shorts: Int
  products: Int
  articles: Int
  digiboard: Int
}

type comments_aggregated_fields {
  id: Float
}

type comments_customers {
  id: ID!
  comments_id(filter: comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): comments
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type comments_customers_aggregated {
  group: JSON
  countAll: Int
  count: comments_customers_aggregated_count
  countDistinct: comments_customers_aggregated_count
  avg: comments_customers_aggregated_fields
  sum: comments_customers_aggregated_fields
  avgDistinct: comments_customers_aggregated_fields
  sumDistinct: comments_customers_aggregated_fields
  min: comments_customers_aggregated_fields
  max: comments_customers_aggregated_fields
}

type comments_customers_aggregated_count {
  id: Int
  comments_id: Int
  customers_id: Int
}

type comments_customers_aggregated_fields {
  id: Float
  comments_id: Float
  customers_id: Float
}

input comments_customers_filter {
  id: number_filter_operators
  comments_id: comments_filter
  customers_id: customers_filter
  _and: [comments_customers_filter]
  _or: [comments_customers_filter]
}

type comments_customers_mutated {
  key: ID!
  event: EventEnum
  data: comments_customers
}

input comments_filter {
  id: number_filter_operators
  response: string_filter_operators
  media: directus_files_filter
  customers: comments_customers_filter
  customers_func: count_function_filter_operators
  shorts: comments_shorts_filter
  shorts_func: count_function_filter_operators
  products: comments_products_filter
  products_func: count_function_filter_operators
  articles: articles_comments_filter
  articles_func: count_function_filter_operators
  digiboard: digiboard_comments_filter
  digiboard_func: count_function_filter_operators
  _and: [comments_filter]
  _or: [comments_filter]
}

type comments_mutated {
  key: ID!
  event: EventEnum
  data: comments
}

type comments_products {
  id: ID!
  comments_id(filter: comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): comments
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type comments_products_aggregated {
  group: JSON
  countAll: Int
  count: comments_products_aggregated_count
  countDistinct: comments_products_aggregated_count
  avg: comments_products_aggregated_fields
  sum: comments_products_aggregated_fields
  avgDistinct: comments_products_aggregated_fields
  sumDistinct: comments_products_aggregated_fields
  min: comments_products_aggregated_fields
  max: comments_products_aggregated_fields
}

type comments_products_aggregated_count {
  id: Int
  comments_id: Int
  products_id: Int
}

type comments_products_aggregated_fields {
  id: Float
  comments_id: Float
  products_id: Float
}

input comments_products_filter {
  id: number_filter_operators
  comments_id: comments_filter
  products_id: products_filter
  _and: [comments_products_filter]
  _or: [comments_products_filter]
}

type comments_products_mutated {
  key: ID!
  event: EventEnum
  data: comments_products
}

type comments_shorts {
  id: ID!
  comments_id(filter: comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): comments
  shorts_id(filter: shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shorts
}

type comments_shorts_aggregated {
  group: JSON
  countAll: Int
  count: comments_shorts_aggregated_count
  countDistinct: comments_shorts_aggregated_count
  avg: comments_shorts_aggregated_fields
  sum: comments_shorts_aggregated_fields
  avgDistinct: comments_shorts_aggregated_fields
  sumDistinct: comments_shorts_aggregated_fields
  min: comments_shorts_aggregated_fields
  max: comments_shorts_aggregated_fields
}

type comments_shorts_aggregated_count {
  id: Int
  comments_id: Int
  shorts_id: Int
}

type comments_shorts_aggregated_fields {
  id: Float
  comments_id: Float
  shorts_id: Float
}

input comments_shorts_filter {
  id: number_filter_operators
  comments_id: comments_filter
  shorts_id: shorts_filter
  _and: [comments_shorts_filter]
  _or: [comments_shorts_filter]
}

type comments_shorts_mutated {
  key: ID!
  event: EventEnum
  data: comments_shorts
}

input count_function_filter_operators {
  count: number_filter_operators
}

type count_functions {
  count: Int
}

type countries {
  id: ID!
  name: String
  iso3: String
  iso2: String
  phonecode: String
  capital: String
  currency: String
  currency_symbol: String
  tld: String
  native: String
  region: JSON
  region_func: count_functions
  subregion: String
  timezones: String
  translations: String
  latitude: Float
  longitude: Float
  emoji: String
  emojiU: String
  created_at: Date
  created_at_func: datetime_functions
  updated_at: Date
  updated_at_func: datetime_functions
  flag: Int
  wikiDataId: String
  states(filter: states_countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [states_countries]
  states_func: count_functions
  products(filter: products_countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_countries]
  products_func: count_functions
  cities(filter: cities_countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [cities_countries]
  cities_func: count_functions
  currencies(filter: currencies_countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [currencies_countries]
  currencies_func: count_functions
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type countries_aggregated {
  group: JSON
  countAll: Int
  count: countries_aggregated_count
  countDistinct: countries_aggregated_count
  avg: countries_aggregated_fields
  sum: countries_aggregated_fields
  avgDistinct: countries_aggregated_fields
  sumDistinct: countries_aggregated_fields
  min: countries_aggregated_fields
  max: countries_aggregated_fields
}

type countries_aggregated_count {
  id: Int
  name: Int
  iso3: Int
  iso2: Int
  phonecode: Int
  capital: Int
  currency: Int
  currency_symbol: Int
  tld: Int
  native: Int
  region: Int
  subregion: Int
  timezones: Int
  translations: Int
  latitude: Int
  longitude: Int
  emoji: Int
  emojiU: Int
  created_at: Int
  updated_at: Int
  flag: Int
  wikiDataId: Int
  states: Int
  products: Int
  cities: Int
  currencies: Int
}

type countries_aggregated_fields {
  id: Float
  latitude: Float
  longitude: Float
  flag: Float
}

input countries_filter {
  id: number_filter_operators
  name: string_filter_operators
  iso3: string_filter_operators
  iso2: string_filter_operators
  phonecode: string_filter_operators
  capital: string_filter_operators
  currency: string_filter_operators
  currency_symbol: string_filter_operators
  tld: string_filter_operators
  native: string_filter_operators
  region: string_filter_operators
  region_func: count_function_filter_operators
  subregion: string_filter_operators
  timezones: string_filter_operators
  translations: string_filter_operators
  latitude: number_filter_operators
  longitude: number_filter_operators
  emoji: string_filter_operators
  emojiU: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  updated_at: date_filter_operators
  updated_at_func: datetime_function_filter_operators
  flag: number_filter_operators
  wikiDataId: string_filter_operators
  states: states_countries_filter
  states_func: count_function_filter_operators
  products: products_countries_filter
  products_func: count_function_filter_operators
  cities: cities_countries_filter
  cities_func: count_function_filter_operators
  currencies: currencies_countries_filter
  currencies_func: count_function_filter_operators
  _and: [countries_filter]
  _or: [countries_filter]
  image: directus_files_filter
}

type countries_mutated {
  key: ID!
  event: EventEnum
  data: countries
}

type coupons {
  id: ID!
  name: String!
  excerpt: String
  discount: Int
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  expiration: Date
  expiration_func: datetime_functions
  products(filter: coupons_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [coupons_products]
  products_func: count_functions
  customers(filter: coupons_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [coupons_customers]
  customers_func: count_functions
}

type coupons_aggregated {
  group: JSON
  countAll: Int
  count: coupons_aggregated_count
  countDistinct: coupons_aggregated_count
  avg: coupons_aggregated_fields
  sum: coupons_aggregated_fields
  avgDistinct: coupons_aggregated_fields
  sumDistinct: coupons_aggregated_fields
  min: coupons_aggregated_fields
  max: coupons_aggregated_fields
}

type coupons_aggregated_count {
  id: Int
  name: Int
  excerpt: Int
  discount: Int
  image: Int
  expiration: Int
  products: Int
  customers: Int
}

type coupons_aggregated_fields {
  id: Float
  discount: Float
}

type coupons_customers {
  id: ID!
  coupons_id(filter: coupons_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): coupons
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type coupons_customers_aggregated {
  group: JSON
  countAll: Int
  count: coupons_customers_aggregated_count
  countDistinct: coupons_customers_aggregated_count
  avg: coupons_customers_aggregated_fields
  sum: coupons_customers_aggregated_fields
  avgDistinct: coupons_customers_aggregated_fields
  sumDistinct: coupons_customers_aggregated_fields
  min: coupons_customers_aggregated_fields
  max: coupons_customers_aggregated_fields
}

type coupons_customers_aggregated_count {
  id: Int
  coupons_id: Int
  customers_id: Int
}

type coupons_customers_aggregated_fields {
  id: Float
  coupons_id: Float
  customers_id: Float
}

input coupons_customers_filter {
  id: number_filter_operators
  coupons_id: coupons_filter
  customers_id: customers_filter
  _and: [coupons_customers_filter]
  _or: [coupons_customers_filter]
}

type coupons_customers_mutated {
  key: ID!
  event: EventEnum
  data: coupons_customers
}

input coupons_filter {
  id: number_filter_operators
  name: string_filter_operators
  excerpt: string_filter_operators
  discount: number_filter_operators
  image: directus_files_filter
  expiration: date_filter_operators
  expiration_func: datetime_function_filter_operators
  products: coupons_products_filter
  products_func: count_function_filter_operators
  customers: coupons_customers_filter
  customers_func: count_function_filter_operators
  _and: [coupons_filter]
  _or: [coupons_filter]
}

type coupons_mutated {
  key: ID!
  event: EventEnum
  data: coupons
}

type coupons_products {
  id: ID!
  coupons_id(filter: coupons_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): coupons
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type coupons_products_aggregated {
  group: JSON
  countAll: Int
  count: coupons_products_aggregated_count
  countDistinct: coupons_products_aggregated_count
  avg: coupons_products_aggregated_fields
  sum: coupons_products_aggregated_fields
  avgDistinct: coupons_products_aggregated_fields
  sumDistinct: coupons_products_aggregated_fields
  min: coupons_products_aggregated_fields
  max: coupons_products_aggregated_fields
}

type coupons_products_aggregated_count {
  id: Int
  coupons_id: Int
  products_id: Int
}

type coupons_products_aggregated_fields {
  id: Float
  coupons_id: Float
  products_id: Float
}

input coupons_products_filter {
  id: number_filter_operators
  coupons_id: coupons_filter
  products_id: products_filter
  _and: [coupons_products_filter]
  _or: [coupons_products_filter]
}

type coupons_products_mutated {
  key: ID!
  event: EventEnum
  data: coupons_products
}

input create_articles_input {
  id: ID
  name: String
  excerpt: String
  content: String
  created_at: Date
  image: String
  type: JSON
  isPublic: Boolean
}

input create_brands_input {
  id: ID
  created_at: Date
  code: String
  name: String
  description: String
  image: String
}

input create_collections_input {
  id: ID
  created_at: Date
  name: String
  description: String
  image: String
  type: JSON
}

input create_comments_input {
  id: ID
  response: String
  media: String
}

input create_coupons_input {
  id: ID
  name: String!
  excerpt: String
  discount: Int
  image: String
  expiration: Date
}

input create_customers_input {
  id: ID
  name_prefix: String
  first_name: String!
  middle_name: String
  last_name: String!
  email: String!
  phone: String
  zipcode: String
  name_suffix: String
  tax_vat_number: String
  description: String
  Address: String
  username: String
  password: String
  payment: String
  dateofbirth: Date
  image: String
  gender: String
  type: [String]
}

input create_digiboard_input {
  id: ID
  name: String!
  board: String
  created_at: Date
  image: String
}

input create_helpa_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  message: String
  question_id: create_helpq_input
  products: [create_products_helpa_input]
}

input create_helpq_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  subject: String
  answer_id: String
}

input create_lists_input {
  id: ID
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  name: String
  description: String
  image: String
  type: String
}

input create_manufacturer_input {
  id: ID
  created_at: Date
  code: String
  name: String
  description: String
  isPublic: Boolean
  image: String
}

input create_musicchart_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  name: String
  description: String
  image: String
}

input create_newsfeed_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  post: String
  image: String
}

input create_newsletters_input {
  id: ID
  email: String!
  created_at: Date
  optin: Boolean
}

input create_products_helpa_input {
  id: ID
  products_id: create_products_input
  helpa_id: create_helpa_input
}

input create_products_input {
  id: ID
  sku: GraphQLBigInt
  name: String
  tax_class: String
  stock_status: String
  weight: String
  created_at: Date
  height: String
  content: String
  part_number: String
  format: JSON
  file: String
  image: String
  type: String
  visibility: Boolean
  price: Float
  size: JSON
  rating: String
  faqsa: [create_products_helpa_input]
}

input create_rewards_input {
  id: ID
  name: String!
  slug: String
  level: String
  created_at: Date
  coupons: String
  expiration: String
  categories: String
  articles: String
  products: String
  customers: String
  users: String
}

input create_shipments_input {
  product: String
  speed_grade: String
  ship_date: Date
  carrier_name: String!
  transit_time: String
  tracking_url: String
  image: String
  id: ID
  client_id: String
  client_secret: String
  country: String
  website: String
}

input create_shops_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  name: String
  content: String
  website: String
}

input create_shorts_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  name: String
  description: String
  video: String
}

input create_Space_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  Name: String
  Description: String
  Image: String
}

input create_tags_input {
  id: ID
  status: String
  sort: Int
  date_created: Date
  name: String
  description: String
  image: String
}

input create_warehouse_input {
  id: ID
  created_at: Date
  name: String
  description: String
  city: String
  state: String
  country: String
  postal: String
  status: String
  image: String
  products: String
  category: String
  isPublic: String
}

input create_websites_input {
  id: ID
  created_at: Date
  name: String
  url: String
  image: String
  type: String
}

type currencies_countries {
  id: ID!
  countries_id(filter: countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): countries
}

type currencies_countries_aggregated {
  group: JSON
  countAll: Int
  count: currencies_countries_aggregated_count
  countDistinct: currencies_countries_aggregated_count
  avg: currencies_countries_aggregated_fields
  sum: currencies_countries_aggregated_fields
  avgDistinct: currencies_countries_aggregated_fields
  sumDistinct: currencies_countries_aggregated_fields
  min: currencies_countries_aggregated_fields
  max: currencies_countries_aggregated_fields
}

type currencies_countries_aggregated_count {
  id: Int
  countries_id: Int
}

type currencies_countries_aggregated_fields {
  id: Float
  countries_id: Float
}

input currencies_countries_filter {
  id: number_filter_operators
  countries_id: countries_filter
  _and: [currencies_countries_filter]
  _or: [currencies_countries_filter]
}

type currencies_countries_mutated {
  key: ID!
  event: EventEnum
  data: currencies_countries
}

type currency {
  id: ID!
  sort: Int
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  code: String
  symbol: String
  departments(filter: currency_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [currency_departments]
  departments_func: count_functions
  customers(filter: currency_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [currency_customers]
  customers_func: count_functions
}

type currency_aggregated {
  group: JSON
  countAll: Int
  count: currency_aggregated_count
  countDistinct: currency_aggregated_count
  avg: currency_aggregated_fields
  sum: currency_aggregated_fields
  avgDistinct: currency_aggregated_fields
  sumDistinct: currency_aggregated_fields
  min: currency_aggregated_fields
  max: currency_aggregated_fields
}

type currency_aggregated_count {
  id: Int
  sort: Int
  date_created: Int
  date_updated: Int
  name: Int
  code: Int
  symbol: Int
  departments: Int
  customers: Int
}

type currency_aggregated_fields {
  id: Float
  sort: Float
}

type currency_customers {
  id: ID!
  currency_id(filter: currency_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): currency
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type currency_customers_aggregated {
  group: JSON
  countAll: Int
  count: currency_customers_aggregated_count
  countDistinct: currency_customers_aggregated_count
  avg: currency_customers_aggregated_fields
  sum: currency_customers_aggregated_fields
  avgDistinct: currency_customers_aggregated_fields
  sumDistinct: currency_customers_aggregated_fields
  min: currency_customers_aggregated_fields
  max: currency_customers_aggregated_fields
}

type currency_customers_aggregated_count {
  id: Int
  currency_id: Int
  customers_id: Int
}

type currency_customers_aggregated_fields {
  id: Float
  currency_id: Float
  customers_id: Float
}

input currency_customers_filter {
  id: number_filter_operators
  currency_id: currency_filter
  customers_id: customers_filter
  _and: [currency_customers_filter]
  _or: [currency_customers_filter]
}

type currency_customers_mutated {
  key: ID!
  event: EventEnum
  data: currency_customers
}

type currency_departments {
  id: ID!
  currency_id(filter: currency_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): currency
  departments_id(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): departments
}

type currency_departments_aggregated {
  group: JSON
  countAll: Int
  count: currency_departments_aggregated_count
  countDistinct: currency_departments_aggregated_count
  avg: currency_departments_aggregated_fields
  sum: currency_departments_aggregated_fields
  avgDistinct: currency_departments_aggregated_fields
  sumDistinct: currency_departments_aggregated_fields
  min: currency_departments_aggregated_fields
  max: currency_departments_aggregated_fields
}

type currency_departments_aggregated_count {
  id: Int
  currency_id: Int
  departments_id: Int
}

type currency_departments_aggregated_fields {
  id: Float
  currency_id: Float
  departments_id: Float
}

input currency_departments_filter {
  id: number_filter_operators
  currency_id: currency_filter
  departments_id: departments_filter
  _and: [currency_departments_filter]
  _or: [currency_departments_filter]
}

type currency_departments_mutated {
  key: ID!
  event: EventEnum
  data: currency_departments
}

input currency_filter {
  id: number_filter_operators
  sort: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  code: string_filter_operators
  symbol: string_filter_operators
  departments: currency_departments_filter
  departments_func: count_function_filter_operators
  customers: currency_customers_filter
  customers_func: count_function_filter_operators
  _and: [currency_filter]
  _or: [currency_filter]
}

type currency_mutated {
  key: ID!
  event: EventEnum
  data: currency
}

type customers {
  id: ID!
  name_prefix: String
  first_name: String!
  middle_name: String
  last_name: String!
  email: String!
  phone: String
  zipcode: String
  name_suffix: String
  websites(filter: websites_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [websites_customers]
  tax_vat_number: String
  description: String
  Address: String
  username: String
  password: String
  payment: String
  dateofbirth: Date
  dateofbirth_func: datetime_functions
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  gender: String
  type: [String]
  brands(filter: brands_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_customers]
  brands_func: count_functions
  collections(filter: collections_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [collections_customers]
  collections_func: count_functions
  comments(filter: comments_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [comments_customers]
  comments_func: count_functions
  newsletters(filter: newsletters_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [newsletters_customers]
  newsletters_func: count_functions
  categories(filter: categories_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [categories_customers]
  categories_func: count_functions
  digiboard(filter: digiboard_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [digiboard_customers]
  digiboard_func: count_functions
  reviews(filter: reviews_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [reviews_customers]
  reviews_func: count_functions
  spaces(filter: customers_Space_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [customers_Space]
  spaces_func: count_functions
  shorts(filter: customers_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [customers_shorts]
  shorts_func: count_functions
  products(filter: customers_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [customers_products]
  products_func: count_functions
  cities(filter: cities_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [cities_customers]
  cities_func: count_functions
  agreements(filter: agreements_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [agreements_customers]
  agreements_func: count_functions
  departments(filter: departments_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments_customers]
  departments_func: count_functions
  lists(filter: lists_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [lists_customers]
  lists_func: count_functions
  musicchart(filter: musicchart_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [musicchart_customers]
  musicchart_func: count_functions
  currency(filter: currency_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [currency_customers]
  currency_func: count_functions
  translations(filter: translations_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_customers]
  translations_func: count_functions
  articles(filter: articles_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles_customers]
  articles_func: count_functions
  meeovistores(filter: meeovistores_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores_customers]
  meeovistores_func: count_functions
  newsfeed(filter: newsfeed_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [newsfeed_customers]
  newsfeed_func: count_functions
  coupons(filter: coupons_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [coupons_customers]
  coupons_func: count_functions
  shops(filter: shops_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_customers]
  shops_func: count_functions
  careers(filter: careers_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [careers_customers]
  careers_func: count_functions
}

type customers_aggregated {
  group: JSON
  countAll: Int
  count: customers_aggregated_count
  countDistinct: customers_aggregated_count
  avg: customers_aggregated_fields
  sum: customers_aggregated_fields
  avgDistinct: customers_aggregated_fields
  sumDistinct: customers_aggregated_fields
  min: customers_aggregated_fields
  max: customers_aggregated_fields
}

type customers_aggregated_count {
  id: Int
  name_prefix: Int
  first_name: Int
  middle_name: Int
  last_name: Int
  email: Int
  phone: Int
  zipcode: Int
  name_suffix: Int
  websites: Int
  tax_vat_number: Int
  description: Int
  Address: Int
  username: Int
  password: Int
  payment: Int
  dateofbirth: Int
  image: Int
  gender: Int
  type: Int
  brands: Int
  collections: Int
  comments: Int
  newsletters: Int
  categories: Int
  digiboard: Int
  reviews: Int
  spaces: Int
  shorts: Int
  products: Int
  cities: Int
  agreements: Int
  departments: Int
  lists: Int
  musicchart: Int
  currency: Int
  translations: Int
  articles: Int
  meeovistores: Int
  newsfeed: Int
  coupons: Int
  shops: Int
  careers: Int
}

type customers_aggregated_fields {
  id: Float
}

input customers_filter {
  id: number_filter_operators
  name_prefix: string_filter_operators
  first_name: string_filter_operators
  middle_name: string_filter_operators
  last_name: string_filter_operators
  email: string_filter_operators
  phone: string_filter_operators
  zipcode: string_filter_operators
  name_suffix: string_filter_operators
  websites: websites_customers_filter
  tax_vat_number: string_filter_operators
  description: string_filter_operators
  Address: string_filter_operators
  username: string_filter_operators
  password: string_filter_operators
  payment: string_filter_operators
  dateofbirth: date_filter_operators
  dateofbirth_func: datetime_function_filter_operators
  image: directus_files_filter
  gender: string_filter_operators
  type: string_filter_operators
  brands: brands_customers_filter
  brands_func: count_function_filter_operators
  collections: collections_customers_filter
  collections_func: count_function_filter_operators
  comments: comments_customers_filter
  comments_func: count_function_filter_operators
  newsletters: newsletters_customers_filter
  newsletters_func: count_function_filter_operators
  categories: categories_customers_filter
  categories_func: count_function_filter_operators
  digiboard: digiboard_customers_filter
  digiboard_func: count_function_filter_operators
  reviews: reviews_customers_filter
  reviews_func: count_function_filter_operators
  spaces: customers_Space_filter
  spaces_func: count_function_filter_operators
  shorts: customers_shorts_filter
  shorts_func: count_function_filter_operators
  products: customers_products_filter
  products_func: count_function_filter_operators
  cities: cities_customers_filter
  cities_func: count_function_filter_operators
  agreements: agreements_customers_filter
  agreements_func: count_function_filter_operators
  departments: departments_customers_filter
  departments_func: count_function_filter_operators
  lists: lists_customers_filter
  lists_func: count_function_filter_operators
  musicchart: musicchart_customers_filter
  musicchart_func: count_function_filter_operators
  currency: currency_customers_filter
  currency_func: count_function_filter_operators
  translations: translations_customers_filter
  translations_func: count_function_filter_operators
  articles: articles_customers_filter
  articles_func: count_function_filter_operators
  meeovistores: meeovistores_customers_filter
  meeovistores_func: count_function_filter_operators
  newsfeed: newsfeed_customers_filter
  newsfeed_func: count_function_filter_operators
  coupons: coupons_customers_filter
  coupons_func: count_function_filter_operators
  shops: shops_customers_filter
  shops_func: count_function_filter_operators
  careers: careers_customers_filter
  careers_func: count_function_filter_operators
  _and: [customers_filter]
  _or: [customers_filter]
}

type customers_mutated {
  key: ID!
  event: EventEnum
  data: customers
}

type customers_products {
  id: ID!
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type customers_products_aggregated {
  group: JSON
  countAll: Int
  count: customers_products_aggregated_count
  countDistinct: customers_products_aggregated_count
  avg: customers_products_aggregated_fields
  sum: customers_products_aggregated_fields
  avgDistinct: customers_products_aggregated_fields
  sumDistinct: customers_products_aggregated_fields
  min: customers_products_aggregated_fields
  max: customers_products_aggregated_fields
}

type customers_products_aggregated_count {
  id: Int
  customers_id: Int
  products_id: Int
}

type customers_products_aggregated_fields {
  id: Float
  customers_id: Float
  products_id: Float
}

input customers_products_filter {
  id: number_filter_operators
  customers_id: customers_filter
  products_id: products_filter
  _and: [customers_products_filter]
  _or: [customers_products_filter]
}

type customers_products_mutated {
  key: ID!
  event: EventEnum
  data: customers_products
}

type customers_shorts {
  id: ID!
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
  shorts_id(filter: shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shorts
}

type customers_shorts_aggregated {
  group: JSON
  countAll: Int
  count: customers_shorts_aggregated_count
  countDistinct: customers_shorts_aggregated_count
  avg: customers_shorts_aggregated_fields
  sum: customers_shorts_aggregated_fields
  avgDistinct: customers_shorts_aggregated_fields
  sumDistinct: customers_shorts_aggregated_fields
  min: customers_shorts_aggregated_fields
  max: customers_shorts_aggregated_fields
}

type customers_shorts_aggregated_count {
  id: Int
  customers_id: Int
  shorts_id: Int
}

type customers_shorts_aggregated_fields {
  id: Float
  customers_id: Float
  shorts_id: Float
}

input customers_shorts_filter {
  id: number_filter_operators
  customers_id: customers_filter
  shorts_id: shorts_filter
  _and: [customers_shorts_filter]
  _or: [customers_shorts_filter]
}

type customers_shorts_mutated {
  key: ID!
  event: EventEnum
  data: customers_shorts
}

type customers_Space {
  id: ID!
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
  Space_id(filter: Space_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): Space
}

type customers_Space_aggregated {
  group: JSON
  countAll: Int
  count: customers_Space_aggregated_count
  countDistinct: customers_Space_aggregated_count
  avg: customers_Space_aggregated_fields
  sum: customers_Space_aggregated_fields
  avgDistinct: customers_Space_aggregated_fields
  sumDistinct: customers_Space_aggregated_fields
  min: customers_Space_aggregated_fields
  max: customers_Space_aggregated_fields
}

type customers_Space_aggregated_count {
  id: Int
  customers_id: Int
  Space_id: Int
}

type customers_Space_aggregated_fields {
  id: Float
  customers_id: Float
  Space_id: Float
}

input customers_Space_filter {
  id: number_filter_operators
  customers_id: customers_filter
  Space_id: Space_filter
  _and: [customers_Space_filter]
  _or: [customers_Space_filter]
}

type customers_Space_mutated {
  key: ID!
  event: EventEnum
  data: customers_Space
}

"""ISO8601 Date values"""
scalar Date

input date_filter_operators {
  _eq: String
  _neq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _null: Boolean
  _nnull: Boolean
  _in: [String]
  _nin: [String]
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input date_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
}

type date_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
}

input datetime_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

type datetime_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
  hour: Int
  minute: Int
  second: Int
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

type departments {
  id: ID!
  name: String!
  websites: String
  description: String
  content: String
  color: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  colortext: String
  Active: Boolean
  brands(filter: brands_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_departments]
  brands_func: count_functions
  articles(filter: articles_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles_departments]
  articles_func: count_functions
  customers(filter: departments_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments_customers]
  customers_func: count_functions
  collections(filter: departments_collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments_collections]
  collections_func: count_functions
  shops(filter: shops_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_departments]
  shops_func: count_functions
  products(filter: products_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_departments]
  products_func: count_functions
  currency(filter: currency_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [currency_departments]
  currency_func: count_functions
  tags(filter: tags_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_departments]
  tags_func: count_functions
  categories(filter: departments_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments_categories]
  categories_func: count_functions
  shorts(filter: departments_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments_shorts]
  shorts_func: count_functions
  translations(filter: translations_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_departments]
  translations_func: count_functions
}

type departments_aggregated {
  group: JSON
  countAll: Int
  count: departments_aggregated_count
  countDistinct: departments_aggregated_count
  avg: departments_aggregated_fields
  sum: departments_aggregated_fields
  avgDistinct: departments_aggregated_fields
  sumDistinct: departments_aggregated_fields
  min: departments_aggregated_fields
  max: departments_aggregated_fields
}

type departments_aggregated_count {
  id: Int
  name: Int
  websites: Int
  description: Int
  content: Int
  color: Int
  image: Int
  colortext: Int
  Active: Int
  brands: Int
  articles: Int
  customers: Int
  collections: Int
  shops: Int
  products: Int
  currency: Int
  tags: Int
  categories: Int
  shorts: Int
  translations: Int
}

type departments_aggregated_fields {
  id: Float
}

type departments_categories {
  id: ID!
  departments_id(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): departments
  categories_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
}

type departments_categories_aggregated {
  group: JSON
  countAll: Int
  count: departments_categories_aggregated_count
  countDistinct: departments_categories_aggregated_count
  avg: departments_categories_aggregated_fields
  sum: departments_categories_aggregated_fields
  avgDistinct: departments_categories_aggregated_fields
  sumDistinct: departments_categories_aggregated_fields
  min: departments_categories_aggregated_fields
  max: departments_categories_aggregated_fields
}

type departments_categories_aggregated_count {
  id: Int
  departments_id: Int
  categories_id: Int
}

type departments_categories_aggregated_fields {
  id: Float
  departments_id: Float
  categories_id: Float
}

input departments_categories_filter {
  id: number_filter_operators
  departments_id: departments_filter
  categories_id: categories_filter
  _and: [departments_categories_filter]
  _or: [departments_categories_filter]
}

type departments_categories_mutated {
  key: ID!
  event: EventEnum
  data: departments_categories
}

type departments_collections {
  id: ID!
  departments_id(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): departments
  collections_id(filter: collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): collections
}

type departments_collections_aggregated {
  group: JSON
  countAll: Int
  count: departments_collections_aggregated_count
  countDistinct: departments_collections_aggregated_count
  avg: departments_collections_aggregated_fields
  sum: departments_collections_aggregated_fields
  avgDistinct: departments_collections_aggregated_fields
  sumDistinct: departments_collections_aggregated_fields
  min: departments_collections_aggregated_fields
  max: departments_collections_aggregated_fields
}

type departments_collections_aggregated_count {
  id: Int
  departments_id: Int
  collections_id: Int
}

type departments_collections_aggregated_fields {
  id: Float
  departments_id: Float
  collections_id: Float
}

input departments_collections_filter {
  id: number_filter_operators
  departments_id: departments_filter
  collections_id: collections_filter
  _and: [departments_collections_filter]
  _or: [departments_collections_filter]
}

type departments_collections_mutated {
  key: ID!
  event: EventEnum
  data: departments_collections
}

type departments_customers {
  id: ID!
  departments_id(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): departments
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type departments_customers_aggregated {
  group: JSON
  countAll: Int
  count: departments_customers_aggregated_count
  countDistinct: departments_customers_aggregated_count
  avg: departments_customers_aggregated_fields
  sum: departments_customers_aggregated_fields
  avgDistinct: departments_customers_aggregated_fields
  sumDistinct: departments_customers_aggregated_fields
  min: departments_customers_aggregated_fields
  max: departments_customers_aggregated_fields
}

type departments_customers_aggregated_count {
  id: Int
  departments_id: Int
  customers_id: Int
}

type departments_customers_aggregated_fields {
  id: Float
  departments_id: Float
  customers_id: Float
}

input departments_customers_filter {
  id: number_filter_operators
  departments_id: departments_filter
  customers_id: customers_filter
  _and: [departments_customers_filter]
  _or: [departments_customers_filter]
}

type departments_customers_mutated {
  key: ID!
  event: EventEnum
  data: departments_customers
}

input departments_filter {
  id: number_filter_operators
  name: string_filter_operators
  websites: string_filter_operators
  description: string_filter_operators
  content: string_filter_operators
  color: string_filter_operators
  image: directus_files_filter
  colortext: string_filter_operators
  Active: boolean_filter_operators
  brands: brands_departments_filter
  brands_func: count_function_filter_operators
  articles: articles_departments_filter
  articles_func: count_function_filter_operators
  customers: departments_customers_filter
  customers_func: count_function_filter_operators
  collections: departments_collections_filter
  collections_func: count_function_filter_operators
  shops: shops_departments_filter
  shops_func: count_function_filter_operators
  products: products_departments_filter
  products_func: count_function_filter_operators
  currency: currency_departments_filter
  currency_func: count_function_filter_operators
  tags: tags_departments_filter
  tags_func: count_function_filter_operators
  categories: departments_categories_filter
  categories_func: count_function_filter_operators
  shorts: departments_shorts_filter
  shorts_func: count_function_filter_operators
  translations: translations_departments_filter
  translations_func: count_function_filter_operators
  _and: [departments_filter]
  _or: [departments_filter]
}

type departments_mutated {
  key: ID!
  event: EventEnum
  data: departments
}

type departments_shorts {
  id: ID!
  departments_id(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): departments
  shorts_id(filter: shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shorts
}

type departments_shorts_aggregated {
  group: JSON
  countAll: Int
  count: departments_shorts_aggregated_count
  countDistinct: departments_shorts_aggregated_count
  avg: departments_shorts_aggregated_fields
  sum: departments_shorts_aggregated_fields
  avgDistinct: departments_shorts_aggregated_fields
  sumDistinct: departments_shorts_aggregated_fields
  min: departments_shorts_aggregated_fields
  max: departments_shorts_aggregated_fields
}

type departments_shorts_aggregated_count {
  id: Int
  departments_id: Int
  shorts_id: Int
}

type departments_shorts_aggregated_fields {
  id: Float
  departments_id: Float
  shorts_id: Float
}

input departments_shorts_filter {
  id: number_filter_operators
  departments_id: departments_filter
  shorts_id: shorts_filter
  _and: [departments_shorts_filter]
  _or: [departments_shorts_filter]
}

type departments_shorts_mutated {
  key: ID!
  event: EventEnum
  data: departments_shorts
}

type digiboard {
  id: ID!
  name: String!
  board: String
  created_at: Date
  created_at_func: datetime_functions
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  categories(filter: digiboard_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [digiboard_categories]
  categories_func: count_functions
  customers(filter: digiboard_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [digiboard_customers]
  customers_func: count_functions
  comments(filter: digiboard_comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [digiboard_comments]
  comments_func: count_functions
}

type digiboard_aggregated {
  group: JSON
  countAll: Int
  count: digiboard_aggregated_count
  countDistinct: digiboard_aggregated_count
  avg: digiboard_aggregated_fields
  sum: digiboard_aggregated_fields
  avgDistinct: digiboard_aggregated_fields
  sumDistinct: digiboard_aggregated_fields
  min: digiboard_aggregated_fields
  max: digiboard_aggregated_fields
}

type digiboard_aggregated_count {
  id: Int
  name: Int
  board: Int
  created_at: Int
  image: Int
  categories: Int
  customers: Int
  comments: Int
}

type digiboard_aggregated_fields {
  id: Float
}

type digiboard_categories {
  id: ID!
  digiboard_id(filter: digiboard_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): digiboard
  categories_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
}

type digiboard_categories_aggregated {
  group: JSON
  countAll: Int
  count: digiboard_categories_aggregated_count
  countDistinct: digiboard_categories_aggregated_count
  avg: digiboard_categories_aggregated_fields
  sum: digiboard_categories_aggregated_fields
  avgDistinct: digiboard_categories_aggregated_fields
  sumDistinct: digiboard_categories_aggregated_fields
  min: digiboard_categories_aggregated_fields
  max: digiboard_categories_aggregated_fields
}

type digiboard_categories_aggregated_count {
  id: Int
  digiboard_id: Int
  categories_id: Int
}

type digiboard_categories_aggregated_fields {
  id: Float
  digiboard_id: Float
  categories_id: Float
}

input digiboard_categories_filter {
  id: number_filter_operators
  digiboard_id: digiboard_filter
  categories_id: categories_filter
  _and: [digiboard_categories_filter]
  _or: [digiboard_categories_filter]
}

type digiboard_categories_mutated {
  key: ID!
  event: EventEnum
  data: digiboard_categories
}

type digiboard_comments {
  id: ID!
  digiboard_id(filter: digiboard_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): digiboard
  comments_id(filter: comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): comments
}

type digiboard_comments_aggregated {
  group: JSON
  countAll: Int
  count: digiboard_comments_aggregated_count
  countDistinct: digiboard_comments_aggregated_count
  avg: digiboard_comments_aggregated_fields
  sum: digiboard_comments_aggregated_fields
  avgDistinct: digiboard_comments_aggregated_fields
  sumDistinct: digiboard_comments_aggregated_fields
  min: digiboard_comments_aggregated_fields
  max: digiboard_comments_aggregated_fields
}

type digiboard_comments_aggregated_count {
  id: Int
  digiboard_id: Int
  comments_id: Int
}

type digiboard_comments_aggregated_fields {
  id: Float
  digiboard_id: Float
  comments_id: Float
}

input digiboard_comments_filter {
  id: number_filter_operators
  digiboard_id: digiboard_filter
  comments_id: comments_filter
  _and: [digiboard_comments_filter]
  _or: [digiboard_comments_filter]
}

type digiboard_comments_mutated {
  key: ID!
  event: EventEnum
  data: digiboard_comments
}

type digiboard_customers {
  id: ID!
  digiboard_id(filter: digiboard_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): digiboard
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type digiboard_customers_aggregated {
  group: JSON
  countAll: Int
  count: digiboard_customers_aggregated_count
  countDistinct: digiboard_customers_aggregated_count
  avg: digiboard_customers_aggregated_fields
  sum: digiboard_customers_aggregated_fields
  avgDistinct: digiboard_customers_aggregated_fields
  sumDistinct: digiboard_customers_aggregated_fields
  min: digiboard_customers_aggregated_fields
  max: digiboard_customers_aggregated_fields
}

type digiboard_customers_aggregated_count {
  id: Int
  digiboard_id: Int
  customers_id: Int
}

type digiboard_customers_aggregated_fields {
  id: Float
  digiboard_id: Float
  customers_id: Float
}

input digiboard_customers_filter {
  id: number_filter_operators
  digiboard_id: digiboard_filter
  customers_id: customers_filter
  _and: [digiboard_customers_filter]
  _or: [digiboard_customers_filter]
}

type digiboard_customers_mutated {
  key: ID!
  event: EventEnum
  data: digiboard_customers
}

input digiboard_filter {
  id: number_filter_operators
  name: string_filter_operators
  board: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  image: directus_files_filter
  categories: digiboard_categories_filter
  categories_func: count_function_filter_operators
  customers: digiboard_customers_filter
  customers_func: count_function_filter_operators
  comments: digiboard_comments_filter
  comments_func: count_function_filter_operators
  _and: [digiboard_filter]
  _or: [digiboard_filter]
}

type digiboard_mutated {
  key: ID!
  event: EventEnum
  data: digiboard
}

type directus_files {
  id: ID!
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  uploaded_by: String
  uploaded_on: Date
  uploaded_on_func: datetime_functions
  modified_by: String
  modified_on: Date
  modified_on_func: datetime_functions
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  tags_func: count_functions
  metadata: JSON
  metadata_func: count_functions
}

input directus_files_filter {
  id: string_filter_operators
  storage: string_filter_operators
  filename_disk: string_filter_operators
  filename_download: string_filter_operators
  title: string_filter_operators
  type: string_filter_operators
  folder: directus_folders_filter
  uploaded_by: string_filter_operators
  uploaded_on: date_filter_operators
  uploaded_on_func: datetime_function_filter_operators
  modified_by: string_filter_operators
  modified_on: date_filter_operators
  modified_on_func: datetime_function_filter_operators
  charset: string_filter_operators
  filesize: number_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  duration: number_filter_operators
  embed: string_filter_operators
  description: string_filter_operators
  location: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  metadata: string_filter_operators
  metadata_func: count_function_filter_operators
  _and: [directus_files_filter]
  _or: [directus_files_filter]
}

type directus_files_mutated {
  key: ID!
  event: EventEnum
  data: directus_files
}

type directus_folders {
  id: ID!
  name: String!
  parent(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
}

input directus_folders_filter {
  id: string_filter_operators
  name: string_filter_operators
  parent: directus_folders_filter
  _and: [directus_folders_filter]
  _or: [directus_folders_filter]
}

type directus_folders_mutated {
  key: ID!
  event: EventEnum
  data: directus_folders
}

enum EventEnum {
  create
  update
  delete
}

"""BigInt value"""
scalar GraphQLBigInt

"""A Float or a String"""
scalar GraphQLStringOrFloat

type helpa {
  id: ID!
  status: String
  sort: Int
  user_created: String
  date_created: Date
  date_created_func: datetime_functions
  user_updated: String
  date_updated: Date
  date_updated_func: datetime_functions
  message: String
  question_id(filter: helpq_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): helpq
  products(filter: products_helpa_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_helpa]
  products_func: count_functions
}

type helpa_aggregated {
  group: JSON
  countAll: Int
  count: helpa_aggregated_count
  countDistinct: helpa_aggregated_count
  avg: helpa_aggregated_fields
  sum: helpa_aggregated_fields
  avgDistinct: helpa_aggregated_fields
  sumDistinct: helpa_aggregated_fields
  min: helpa_aggregated_fields
  max: helpa_aggregated_fields
}

type helpa_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  message: Int
  question_id: Int
  products: Int
}

type helpa_aggregated_fields {
  id: Float
  sort: Float
  question_id: Float
}

input helpa_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: string_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  message: string_filter_operators
  question_id: helpq_filter
  products: products_helpa_filter
  products_func: count_function_filter_operators
  _and: [helpa_filter]
  _or: [helpa_filter]
}

type helpa_mutated {
  key: ID!
  event: EventEnum
  data: helpa
}

type helpq {
  id: ID!
  status: String
  sort: Int
  user_created: String
  date_created: Date
  date_created_func: datetime_functions
  user_updated: String
  date_updated: Date
  date_updated_func: datetime_functions
  subject: String
  answer_id: String
}

type helpq_aggregated {
  group: JSON
  countAll: Int
  count: helpq_aggregated_count
  countDistinct: helpq_aggregated_count
  avg: helpq_aggregated_fields
  sum: helpq_aggregated_fields
  avgDistinct: helpq_aggregated_fields
  sumDistinct: helpq_aggregated_fields
  min: helpq_aggregated_fields
  max: helpq_aggregated_fields
}

type helpq_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  subject: Int
  answer_id: Int
}

type helpq_aggregated_fields {
  id: Float
  sort: Float
}

input helpq_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: string_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  subject: string_filter_operators
  answer_id: string_filter_operators
  _and: [helpq_filter]
  _or: [helpq_filter]
}

type helpq_mutated {
  key: ID!
  event: EventEnum
  data: helpq
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type lists {
  id: ID!
  sort: Int
  user_created: String
  date_created: Date
  date_created_func: datetime_functions
  user_updated: String
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  description: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  type: String
  customers(filter: lists_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [lists_customers]
  customers_func: count_functions
  products(filter: lists_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [lists_products]
  products_func: count_functions
}

type lists_aggregated {
  group: JSON
  countAll: Int
  count: lists_aggregated_count
  countDistinct: lists_aggregated_count
  avg: lists_aggregated_fields
  sum: lists_aggregated_fields
  avgDistinct: lists_aggregated_fields
  sumDistinct: lists_aggregated_fields
  min: lists_aggregated_fields
  max: lists_aggregated_fields
}

type lists_aggregated_count {
  id: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  name: Int
  description: Int
  image: Int
  type: Int
  customers: Int
  products: Int
}

type lists_aggregated_fields {
  id: Float
  sort: Float
}

type lists_customers {
  id: ID!
  lists_id(filter: lists_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): lists
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type lists_customers_aggregated {
  group: JSON
  countAll: Int
  count: lists_customers_aggregated_count
  countDistinct: lists_customers_aggregated_count
  avg: lists_customers_aggregated_fields
  sum: lists_customers_aggregated_fields
  avgDistinct: lists_customers_aggregated_fields
  sumDistinct: lists_customers_aggregated_fields
  min: lists_customers_aggregated_fields
  max: lists_customers_aggregated_fields
}

type lists_customers_aggregated_count {
  id: Int
  lists_id: Int
  customers_id: Int
}

type lists_customers_aggregated_fields {
  id: Float
  lists_id: Float
  customers_id: Float
}

input lists_customers_filter {
  id: number_filter_operators
  lists_id: lists_filter
  customers_id: customers_filter
  _and: [lists_customers_filter]
  _or: [lists_customers_filter]
}

type lists_customers_mutated {
  key: ID!
  event: EventEnum
  data: lists_customers
}

input lists_filter {
  id: number_filter_operators
  sort: number_filter_operators
  user_created: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: string_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  image: directus_files_filter
  type: string_filter_operators
  customers: lists_customers_filter
  customers_func: count_function_filter_operators
  products: lists_products_filter
  products_func: count_function_filter_operators
  _and: [lists_filter]
  _or: [lists_filter]
}

type lists_mutated {
  key: ID!
  event: EventEnum
  data: lists
}

type lists_products {
  id: ID!
  lists_id(filter: lists_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): lists
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type lists_products_aggregated {
  group: JSON
  countAll: Int
  count: lists_products_aggregated_count
  countDistinct: lists_products_aggregated_count
  avg: lists_products_aggregated_fields
  sum: lists_products_aggregated_fields
  avgDistinct: lists_products_aggregated_fields
  sumDistinct: lists_products_aggregated_fields
  min: lists_products_aggregated_fields
  max: lists_products_aggregated_fields
}

type lists_products_aggregated_count {
  id: Int
  lists_id: Int
  products_id: Int
}

type lists_products_aggregated_fields {
  id: Float
  lists_id: Float
  products_id: Float
}

input lists_products_filter {
  id: number_filter_operators
  lists_id: lists_filter
  products_id: products_filter
  _and: [lists_products_filter]
  _or: [lists_products_filter]
}

type lists_products_mutated {
  key: ID!
  event: EventEnum
  data: lists_products
}

type manufacturer {
  id: ID!
  created_at: Date
  created_at_func: datetime_functions
  code: String
  name: String
  description: String
  isPublic: Boolean
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  brands(filter: brands_manufacturer_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_manufacturer]
  brands_func: count_functions
  products(filter: products_manufacturer_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_manufacturer]
  products_func: count_functions
}

type manufacturer_aggregated {
  group: JSON
  countAll: Int
  count: manufacturer_aggregated_count
  countDistinct: manufacturer_aggregated_count
}

type manufacturer_aggregated_count {
  id: Int
  created_at: Int
  code: Int
  name: Int
  description: Int
  isPublic: Int
  image: Int
  brands: Int
  products: Int
}

input manufacturer_filter {
  id: number_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  code: string_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  isPublic: boolean_filter_operators
  image: directus_files_filter
  brands: brands_manufacturer_filter
  brands_func: count_function_filter_operators
  products: products_manufacturer_filter
  products_func: count_function_filter_operators
  _and: [manufacturer_filter]
  _or: [manufacturer_filter]
}

type manufacturer_mutated {
  key: ID!
  event: EventEnum
  data: manufacturer
}

type meeovistores {
  id: ID!
  sort: Int
  user_created: String
  date_created: Date
  date_created_func: datetime_functions
  user_updated: String
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  content: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  color: String
  colortext: String
  categories(filter: categories_meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [categories_meeovistores]
  categories_func: count_functions
  customers(filter: meeovistores_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores_customers]
  customers_func: count_functions
  collections(filter: meeovistores_collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores_collections]
  collections_func: count_functions
  products(filter: meeovistores_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores_products]
  products_func: count_functions
  websites(filter: meeovistores_websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores_websites]
  websites_func: count_functions
  translations(filter: translations_meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_meeovistores]
  translations_func: count_functions
}

type meeovistores_aggregated {
  group: JSON
  countAll: Int
  count: meeovistores_aggregated_count
  countDistinct: meeovistores_aggregated_count
  avg: meeovistores_aggregated_fields
  sum: meeovistores_aggregated_fields
  avgDistinct: meeovistores_aggregated_fields
  sumDistinct: meeovistores_aggregated_fields
  min: meeovistores_aggregated_fields
  max: meeovistores_aggregated_fields
}

type meeovistores_aggregated_count {
  id: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  name: Int
  content: Int
  image: Int
  color: Int
  colortext: Int
  categories: Int
  customers: Int
  collections: Int
  products: Int
  websites: Int
  translations: Int
}

type meeovistores_aggregated_fields {
  id: Float
  sort: Float
}

type meeovistores_collections {
  id: ID!
  meeovistores_id(filter: meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): meeovistores
  collections_id(filter: collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): collections
}

type meeovistores_collections_aggregated {
  group: JSON
  countAll: Int
  count: meeovistores_collections_aggregated_count
  countDistinct: meeovistores_collections_aggregated_count
  avg: meeovistores_collections_aggregated_fields
  sum: meeovistores_collections_aggregated_fields
  avgDistinct: meeovistores_collections_aggregated_fields
  sumDistinct: meeovistores_collections_aggregated_fields
  min: meeovistores_collections_aggregated_fields
  max: meeovistores_collections_aggregated_fields
}

type meeovistores_collections_aggregated_count {
  id: Int
  meeovistores_id: Int
  collections_id: Int
}

type meeovistores_collections_aggregated_fields {
  id: Float
  meeovistores_id: Float
  collections_id: Float
}

input meeovistores_collections_filter {
  id: number_filter_operators
  meeovistores_id: meeovistores_filter
  collections_id: collections_filter
  _and: [meeovistores_collections_filter]
  _or: [meeovistores_collections_filter]
}

type meeovistores_collections_mutated {
  key: ID!
  event: EventEnum
  data: meeovistores_collections
}

type meeovistores_customers {
  id: ID!
  meeovistores_id(filter: meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): meeovistores
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type meeovistores_customers_aggregated {
  group: JSON
  countAll: Int
  count: meeovistores_customers_aggregated_count
  countDistinct: meeovistores_customers_aggregated_count
  avg: meeovistores_customers_aggregated_fields
  sum: meeovistores_customers_aggregated_fields
  avgDistinct: meeovistores_customers_aggregated_fields
  sumDistinct: meeovistores_customers_aggregated_fields
  min: meeovistores_customers_aggregated_fields
  max: meeovistores_customers_aggregated_fields
}

type meeovistores_customers_aggregated_count {
  id: Int
  meeovistores_id: Int
  customers_id: Int
}

type meeovistores_customers_aggregated_fields {
  id: Float
  meeovistores_id: Float
  customers_id: Float
}

input meeovistores_customers_filter {
  id: number_filter_operators
  meeovistores_id: meeovistores_filter
  customers_id: customers_filter
  _and: [meeovistores_customers_filter]
  _or: [meeovistores_customers_filter]
}

type meeovistores_customers_mutated {
  key: ID!
  event: EventEnum
  data: meeovistores_customers
}

input meeovistores_filter {
  id: number_filter_operators
  sort: number_filter_operators
  user_created: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: string_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  content: string_filter_operators
  image: directus_files_filter
  color: string_filter_operators
  colortext: string_filter_operators
  categories: categories_meeovistores_filter
  categories_func: count_function_filter_operators
  customers: meeovistores_customers_filter
  customers_func: count_function_filter_operators
  collections: meeovistores_collections_filter
  collections_func: count_function_filter_operators
  products: meeovistores_products_filter
  products_func: count_function_filter_operators
  websites: meeovistores_websites_filter
  websites_func: count_function_filter_operators
  translations: translations_meeovistores_filter
  translations_func: count_function_filter_operators
  _and: [meeovistores_filter]
  _or: [meeovistores_filter]
}

type meeovistores_mutated {
  key: ID!
  event: EventEnum
  data: meeovistores
}

type meeovistores_products {
  id: ID!
  meeovistores_id(filter: meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): meeovistores
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type meeovistores_products_aggregated {
  group: JSON
  countAll: Int
  count: meeovistores_products_aggregated_count
  countDistinct: meeovistores_products_aggregated_count
  avg: meeovistores_products_aggregated_fields
  sum: meeovistores_products_aggregated_fields
  avgDistinct: meeovistores_products_aggregated_fields
  sumDistinct: meeovistores_products_aggregated_fields
  min: meeovistores_products_aggregated_fields
  max: meeovistores_products_aggregated_fields
}

type meeovistores_products_aggregated_count {
  id: Int
  meeovistores_id: Int
  products_id: Int
}

type meeovistores_products_aggregated_fields {
  id: Float
  meeovistores_id: Float
  products_id: Float
}

input meeovistores_products_filter {
  id: number_filter_operators
  meeovistores_id: meeovistores_filter
  products_id: products_filter
  _and: [meeovistores_products_filter]
  _or: [meeovistores_products_filter]
}

type meeovistores_products_mutated {
  key: ID!
  event: EventEnum
  data: meeovistores_products
}

type meeovistores_websites {
  id: ID!
  meeovistores_id(filter: meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): meeovistores
  websites_id(filter: websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): websites
}

type meeovistores_websites_aggregated {
  group: JSON
  countAll: Int
  count: meeovistores_websites_aggregated_count
  countDistinct: meeovistores_websites_aggregated_count
  avg: meeovistores_websites_aggregated_fields
  sum: meeovistores_websites_aggregated_fields
  avgDistinct: meeovistores_websites_aggregated_fields
  sumDistinct: meeovistores_websites_aggregated_fields
  min: meeovistores_websites_aggregated_fields
  max: meeovistores_websites_aggregated_fields
}

type meeovistores_websites_aggregated_count {
  id: Int
  meeovistores_id: Int
  websites_id: Int
}

type meeovistores_websites_aggregated_fields {
  id: Float
  meeovistores_id: Float
  websites_id: Float
}

input meeovistores_websites_filter {
  id: number_filter_operators
  meeovistores_id: meeovistores_filter
  websites_id: websites_filter
  _and: [meeovistores_websites_filter]
  _or: [meeovistores_websites_filter]
}

type meeovistores_websites_mutated {
  key: ID!
  event: EventEnum
  data: meeovistores_websites
}

type musicchart {
  id: ID!
  status: String
  sort: Int
  user_created: String
  date_created: Date
  date_created_func: datetime_functions
  user_updated: String
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  description: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  products(filter: musicchart_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [musicchart_products]
  products_func: count_functions
  customers(filter: musicchart_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [musicchart_customers]
  customers_func: count_functions
  categories(filter: musicchart_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [musicchart_categories]
  categories_func: count_functions
}

type musicchart_aggregated {
  group: JSON
  countAll: Int
  count: musicchart_aggregated_count
  countDistinct: musicchart_aggregated_count
  avg: musicchart_aggregated_fields
  sum: musicchart_aggregated_fields
  avgDistinct: musicchart_aggregated_fields
  sumDistinct: musicchart_aggregated_fields
  min: musicchart_aggregated_fields
  max: musicchart_aggregated_fields
}

type musicchart_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  name: Int
  description: Int
  image: Int
  products: Int
  customers: Int
  categories: Int
}

type musicchart_aggregated_fields {
  id: Float
  sort: Float
}

type musicchart_categories {
  id: ID!
  musicchart_id(filter: musicchart_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): musicchart
  categories_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
}

type musicchart_categories_aggregated {
  group: JSON
  countAll: Int
  count: musicchart_categories_aggregated_count
  countDistinct: musicchart_categories_aggregated_count
  avg: musicchart_categories_aggregated_fields
  sum: musicchart_categories_aggregated_fields
  avgDistinct: musicchart_categories_aggregated_fields
  sumDistinct: musicchart_categories_aggregated_fields
  min: musicchart_categories_aggregated_fields
  max: musicchart_categories_aggregated_fields
}

type musicchart_categories_aggregated_count {
  id: Int
  musicchart_id: Int
  categories_id: Int
}

type musicchart_categories_aggregated_fields {
  id: Float
  musicchart_id: Float
  categories_id: Float
}

input musicchart_categories_filter {
  id: number_filter_operators
  musicchart_id: musicchart_filter
  categories_id: categories_filter
  _and: [musicchart_categories_filter]
  _or: [musicchart_categories_filter]
}

type musicchart_categories_mutated {
  key: ID!
  event: EventEnum
  data: musicchart_categories
}

type musicchart_customers {
  id: ID!
  musicchart_id(filter: musicchart_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): musicchart
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type musicchart_customers_aggregated {
  group: JSON
  countAll: Int
  count: musicchart_customers_aggregated_count
  countDistinct: musicchart_customers_aggregated_count
  avg: musicchart_customers_aggregated_fields
  sum: musicchart_customers_aggregated_fields
  avgDistinct: musicchart_customers_aggregated_fields
  sumDistinct: musicchart_customers_aggregated_fields
  min: musicchart_customers_aggregated_fields
  max: musicchart_customers_aggregated_fields
}

type musicchart_customers_aggregated_count {
  id: Int
  musicchart_id: Int
  customers_id: Int
}

type musicchart_customers_aggregated_fields {
  id: Float
  musicchart_id: Float
  customers_id: Float
}

input musicchart_customers_filter {
  id: number_filter_operators
  musicchart_id: musicchart_filter
  customers_id: customers_filter
  _and: [musicchart_customers_filter]
  _or: [musicchart_customers_filter]
}

type musicchart_customers_mutated {
  key: ID!
  event: EventEnum
  data: musicchart_customers
}

input musicchart_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: string_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  image: directus_files_filter
  products: musicchart_products_filter
  products_func: count_function_filter_operators
  customers: musicchart_customers_filter
  customers_func: count_function_filter_operators
  categories: musicchart_categories_filter
  categories_func: count_function_filter_operators
  _and: [musicchart_filter]
  _or: [musicchart_filter]
}

type musicchart_mutated {
  key: ID!
  event: EventEnum
  data: musicchart
}

type musicchart_products {
  id: ID!
  musicchart_id(filter: musicchart_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): musicchart
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type musicchart_products_aggregated {
  group: JSON
  countAll: Int
  count: musicchart_products_aggregated_count
  countDistinct: musicchart_products_aggregated_count
  avg: musicchart_products_aggregated_fields
  sum: musicchart_products_aggregated_fields
  avgDistinct: musicchart_products_aggregated_fields
  sumDistinct: musicchart_products_aggregated_fields
  min: musicchart_products_aggregated_fields
  max: musicchart_products_aggregated_fields
}

type musicchart_products_aggregated_count {
  id: Int
  musicchart_id: Int
  products_id: Int
}

type musicchart_products_aggregated_fields {
  id: Float
  musicchart_id: Float
  products_id: Float
}

input musicchart_products_filter {
  id: number_filter_operators
  musicchart_id: musicchart_filter
  products_id: products_filter
  _and: [musicchart_products_filter]
  _or: [musicchart_products_filter]
}

type musicchart_products_mutated {
  key: ID!
  event: EventEnum
  data: musicchart_products
}

type Mutation {
  create_customers_items(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_customers_input!]): [customers!]!
  create_customers_item(data: create_customers_input!): customers
  create_tags_items(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_tags_input!]): [tags!]!
  create_tags_item(data: create_tags_input!): tags
  create_articles_items(filter: articles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_articles_input!]): [articles!]!
  create_articles_item(data: create_articles_input!): articles
  create_brands_items(filter: brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_brands_input!]): [brands!]!
  create_brands_item(data: create_brands_input!): brands
  create_collections_items(filter: collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_collections_input!]): [collections!]!
  create_collections_item(data: create_collections_input!): collections
  create_coupons_items(filter: coupons_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_coupons_input!]): [coupons!]!
  create_coupons_item(data: create_coupons_input!): coupons
  create_comments_items(filter: comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_comments_input!]): [comments!]!
  create_comments_item(data: create_comments_input!): comments
  create_manufacturer_items(filter: manufacturer_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_manufacturer_input!]): [manufacturer!]!
  create_manufacturer_item(data: create_manufacturer_input!): manufacturer
  create_lists_items(filter: lists_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_lists_input!]): [lists!]!
  create_lists_item(data: create_lists_input!): lists
  create_helpq_items(filter: helpq_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_helpq_input!]): [helpq!]!
  create_helpq_item(data: create_helpq_input!): helpq
  create_shorts_items(filter: shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_shorts_input!]): [shorts!]!
  create_shorts_item(data: create_shorts_input!): shorts
  create_helpa_items(filter: helpa_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_helpa_input!]): [helpa!]!
  create_helpa_item(data: create_helpa_input!): helpa
  create_shops_items(filter: shops_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_shops_input!]): [shops!]!
  create_shops_item(data: create_shops_input!): shops
  create_products_items(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_products_input!]): [products!]!
  create_products_item(data: create_products_input!): products
  create_products_helpa_items(filter: products_helpa_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_products_helpa_input!]): [products_helpa!]!
  create_products_helpa_item(data: create_products_helpa_input!): products_helpa
  create_rewards_items(filter: rewards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_rewards_input!]): [rewards!]!
  create_rewards_item(data: create_rewards_input!): rewards
  create_shipments_items(filter: shipments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_shipments_input!]): [shipments!]!
  create_shipments_item(data: create_shipments_input!): shipments
  create_warehouse_items(filter: warehouse_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_warehouse_input!]): [warehouse!]!
  create_warehouse_item(data: create_warehouse_input!): warehouse
  create_websites_items(filter: websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_websites_input!]): [websites!]!
  create_websites_item(data: create_websites_input!): websites
  create_musicchart_items(filter: musicchart_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_musicchart_input!]): [musicchart!]!
  create_musicchart_item(data: create_musicchart_input!): musicchart
  create_digiboard_items(filter: digiboard_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_digiboard_input!]): [digiboard!]!
  create_digiboard_item(data: create_digiboard_input!): digiboard
  create_newsletters_items(filter: newsletters_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_newsletters_input!]): [newsletters!]!
  create_newsletters_item(data: create_newsletters_input!): newsletters
  create_Space_items(filter: Space_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_Space_input!]): [Space!]!
  create_Space_item(data: create_Space_input!): Space
  create_newsfeed_items(filter: newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_newsfeed_input!]): [newsfeed!]!
  create_newsfeed_item(data: create_newsfeed_input!): newsfeed
  update_customers_items(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_customers_input!): [customers!]!
  update_customers_batch(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_customers_input!]): [customers!]!
  update_customers_item(id: ID!, data: update_customers_input!): customers
  update_tags_items(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_tags_input!): [tags!]!
  update_tags_batch(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_tags_input!]): [tags!]!
  update_tags_item(id: ID!, data: update_tags_input!): tags
  update_articles_items(filter: articles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_articles_input!): [articles!]!
  update_articles_batch(filter: articles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_articles_input!]): [articles!]!
  update_articles_item(id: ID!, data: update_articles_input!): articles
  update_brands_items(filter: brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_brands_input!): [brands!]!
  update_brands_batch(filter: brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_brands_input!]): [brands!]!
  update_brands_item(id: ID!, data: update_brands_input!): brands
  update_collections_items(filter: collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_collections_input!): [collections!]!
  update_collections_batch(filter: collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_collections_input!]): [collections!]!
  update_collections_item(id: ID!, data: update_collections_input!): collections
  update_coupons_items(filter: coupons_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_coupons_input!): [coupons!]!
  update_coupons_batch(filter: coupons_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_coupons_input!]): [coupons!]!
  update_coupons_item(id: ID!, data: update_coupons_input!): coupons
  update_comments_items(filter: comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_comments_input!): [comments!]!
  update_comments_batch(filter: comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_comments_input!]): [comments!]!
  update_comments_item(id: ID!, data: update_comments_input!): comments
  update_manufacturer_items(filter: manufacturer_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_manufacturer_input!): [manufacturer!]!
  update_manufacturer_batch(filter: manufacturer_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_manufacturer_input!]): [manufacturer!]!
  update_manufacturer_item(id: ID!, data: update_manufacturer_input!): manufacturer
  update_lists_items(filter: lists_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_lists_input!): [lists!]!
  update_lists_batch(filter: lists_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_lists_input!]): [lists!]!
  update_lists_item(id: ID!, data: update_lists_input!): lists
  update_helpq_items(filter: helpq_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_helpq_input!): [helpq!]!
  update_helpq_batch(filter: helpq_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_helpq_input!]): [helpq!]!
  update_helpq_item(id: ID!, data: update_helpq_input!): helpq
  update_shorts_items(filter: shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_shorts_input!): [shorts!]!
  update_shorts_batch(filter: shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_shorts_input!]): [shorts!]!
  update_shorts_item(id: ID!, data: update_shorts_input!): shorts
  update_helpa_items(filter: helpa_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_helpa_input!): [helpa!]!
  update_helpa_batch(filter: helpa_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_helpa_input!]): [helpa!]!
  update_helpa_item(id: ID!, data: update_helpa_input!): helpa
  update_shops_items(filter: shops_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_shops_input!): [shops!]!
  update_shops_batch(filter: shops_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_shops_input!]): [shops!]!
  update_shops_item(id: ID!, data: update_shops_input!): shops
  update_products_items(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_products_input!): [products!]!
  update_products_batch(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_products_input!]): [products!]!
  update_products_item(id: ID!, data: update_products_input!): products
  update_products_helpa_items(filter: products_helpa_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_products_helpa_input!): [products_helpa!]!
  update_products_helpa_batch(filter: products_helpa_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_products_helpa_input!]): [products_helpa!]!
  update_products_helpa_item(id: ID!, data: update_products_helpa_input!): products_helpa
  update_rewards_items(filter: rewards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_rewards_input!): [rewards!]!
  update_rewards_batch(filter: rewards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_rewards_input!]): [rewards!]!
  update_rewards_item(id: ID!, data: update_rewards_input!): rewards
  update_shipments_items(filter: shipments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_shipments_input!): [shipments!]!
  update_shipments_batch(filter: shipments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_shipments_input!]): [shipments!]!
  update_shipments_item(id: ID!, data: update_shipments_input!): shipments
  update_warehouse_items(filter: warehouse_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_warehouse_input!): [warehouse!]!
  update_warehouse_batch(filter: warehouse_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_warehouse_input!]): [warehouse!]!
  update_warehouse_item(id: ID!, data: update_warehouse_input!): warehouse
  update_websites_items(filter: websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_websites_input!): [websites!]!
  update_websites_batch(filter: websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_websites_input!]): [websites!]!
  update_websites_item(id: ID!, data: update_websites_input!): websites
  update_musicchart_items(filter: musicchart_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_musicchart_input!): [musicchart!]!
  update_musicchart_batch(filter: musicchart_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_musicchart_input!]): [musicchart!]!
  update_musicchart_item(id: ID!, data: update_musicchart_input!): musicchart
  update_digiboard_items(filter: digiboard_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_digiboard_input!): [digiboard!]!
  update_digiboard_batch(filter: digiboard_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_digiboard_input!]): [digiboard!]!
  update_digiboard_item(id: ID!, data: update_digiboard_input!): digiboard
  update_Space_items(filter: Space_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_Space_input!): [Space!]!
  update_Space_batch(filter: Space_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_Space_input!]): [Space!]!
  update_Space_item(id: ID!, data: update_Space_input!): Space
  update_newsfeed_items(filter: newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_newsfeed_input!): [newsfeed!]!
  update_newsfeed_batch(filter: newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_newsfeed_input!]): [newsfeed!]!
  update_newsfeed_item(id: ID!, data: update_newsfeed_input!): newsfeed
  delete_customers_items(ids: [ID]!): delete_many
  delete_customers_item(id: ID!): delete_one
  delete_tags_items(ids: [ID]!): delete_many
  delete_tags_item(id: ID!): delete_one
  delete_articles_items(ids: [ID]!): delete_many
  delete_articles_item(id: ID!): delete_one
  delete_brands_items(ids: [ID]!): delete_many
  delete_brands_item(id: ID!): delete_one
  delete_collections_items(ids: [ID]!): delete_many
  delete_collections_item(id: ID!): delete_one
  delete_coupons_items(ids: [ID]!): delete_many
  delete_coupons_item(id: ID!): delete_one
  delete_comments_items(ids: [ID]!): delete_many
  delete_comments_item(id: ID!): delete_one
  delete_manufacturer_items(ids: [ID]!): delete_many
  delete_manufacturer_item(id: ID!): delete_one
  delete_lists_items(ids: [ID]!): delete_many
  delete_lists_item(id: ID!): delete_one
  delete_helpq_items(ids: [ID]!): delete_many
  delete_helpq_item(id: ID!): delete_one
  delete_shorts_items(ids: [ID]!): delete_many
  delete_shorts_item(id: ID!): delete_one
  delete_helpa_items(ids: [ID]!): delete_many
  delete_helpa_item(id: ID!): delete_one
  delete_shops_items(ids: [ID]!): delete_many
  delete_shops_item(id: ID!): delete_one
  delete_products_items(ids: [ID]!): delete_many
  delete_products_item(id: ID!): delete_one
  delete_products_helpa_items(ids: [ID]!): delete_many
  delete_products_helpa_item(id: ID!): delete_one
  delete_rewards_items(ids: [ID]!): delete_many
  delete_rewards_item(id: ID!): delete_one
  delete_shipments_items(ids: [ID]!): delete_many
  delete_shipments_item(id: ID!): delete_one
  delete_warehouse_items(ids: [ID]!): delete_many
  delete_warehouse_item(id: ID!): delete_one
  delete_websites_items(ids: [ID]!): delete_many
  delete_websites_item(id: ID!): delete_one
  delete_musicchart_items(ids: [ID]!): delete_many
  delete_musicchart_item(id: ID!): delete_one
  delete_digiboard_items(ids: [ID]!): delete_many
  delete_digiboard_item(id: ID!): delete_one
  delete_newsletters_items(ids: [ID]!): delete_many
  delete_newsletters_item(id: ID!): delete_one
  delete_Space_items(ids: [ID]!): delete_many
  delete_Space_item(id: ID!): delete_one
}

type newsfeed {
  id: ID!
  status: String
  sort: Int
  user_created: String
  date_created: Date
  date_created_func: datetime_functions
  user_updated: String
  date_updated: Date
  date_updated_func: datetime_functions
  post: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  customers(filter: newsfeed_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [newsfeed_customers]
  customers_func: count_functions
  Space(filter: Space_newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [Space_newsfeed]
  Space_func: count_functions
  products(filter: newsfeed_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [newsfeed_products]
  products_func: count_functions
  shops(filter: shops_newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_newsfeed]
  shops_func: count_functions
}

type newsfeed_aggregated {
  group: JSON
  countAll: Int
  count: newsfeed_aggregated_count
  countDistinct: newsfeed_aggregated_count
  avg: newsfeed_aggregated_fields
  sum: newsfeed_aggregated_fields
  avgDistinct: newsfeed_aggregated_fields
  sumDistinct: newsfeed_aggregated_fields
  min: newsfeed_aggregated_fields
  max: newsfeed_aggregated_fields
}

type newsfeed_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  post: Int
  image: Int
  customers: Int
  Space: Int
  products: Int
  shops: Int
}

type newsfeed_aggregated_fields {
  id: Float
  sort: Float
}

type newsfeed_customers {
  id: ID!
  newsfeed_id(filter: newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): newsfeed
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type newsfeed_customers_aggregated {
  group: JSON
  countAll: Int
  count: newsfeed_customers_aggregated_count
  countDistinct: newsfeed_customers_aggregated_count
  avg: newsfeed_customers_aggregated_fields
  sum: newsfeed_customers_aggregated_fields
  avgDistinct: newsfeed_customers_aggregated_fields
  sumDistinct: newsfeed_customers_aggregated_fields
  min: newsfeed_customers_aggregated_fields
  max: newsfeed_customers_aggregated_fields
}

type newsfeed_customers_aggregated_count {
  id: Int
  newsfeed_id: Int
  customers_id: Int
}

type newsfeed_customers_aggregated_fields {
  id: Float
  newsfeed_id: Float
  customers_id: Float
}

input newsfeed_customers_filter {
  id: number_filter_operators
  newsfeed_id: newsfeed_filter
  customers_id: customers_filter
  _and: [newsfeed_customers_filter]
  _or: [newsfeed_customers_filter]
}

type newsfeed_customers_mutated {
  key: ID!
  event: EventEnum
  data: newsfeed_customers
}

input newsfeed_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: string_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  post: string_filter_operators
  image: directus_files_filter
  customers: newsfeed_customers_filter
  customers_func: count_function_filter_operators
  Space: Space_newsfeed_filter
  Space_func: count_function_filter_operators
  products: newsfeed_products_filter
  products_func: count_function_filter_operators
  shops: shops_newsfeed_filter
  shops_func: count_function_filter_operators
  _and: [newsfeed_filter]
  _or: [newsfeed_filter]
}

type newsfeed_mutated {
  key: ID!
  event: EventEnum
  data: newsfeed
}

type newsfeed_products {
  id: ID!
  newsfeed_id(filter: newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): newsfeed
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type newsfeed_products_aggregated {
  group: JSON
  countAll: Int
  count: newsfeed_products_aggregated_count
  countDistinct: newsfeed_products_aggregated_count
  avg: newsfeed_products_aggregated_fields
  sum: newsfeed_products_aggregated_fields
  avgDistinct: newsfeed_products_aggregated_fields
  sumDistinct: newsfeed_products_aggregated_fields
  min: newsfeed_products_aggregated_fields
  max: newsfeed_products_aggregated_fields
}

type newsfeed_products_aggregated_count {
  id: Int
  newsfeed_id: Int
  products_id: Int
}

type newsfeed_products_aggregated_fields {
  id: Float
  newsfeed_id: Float
  products_id: Float
}

input newsfeed_products_filter {
  id: number_filter_operators
  newsfeed_id: newsfeed_filter
  products_id: products_filter
  _and: [newsfeed_products_filter]
  _or: [newsfeed_products_filter]
}

type newsfeed_products_mutated {
  key: ID!
  event: EventEnum
  data: newsfeed_products
}

type newsletters {
  id: ID!
  email: String!
  created_at: Date
  created_at_func: datetime_functions
  optin: Boolean
  customers(filter: newsletters_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [newsletters_customers]
  customers_func: count_functions
}

type newsletters_aggregated {
  group: JSON
  countAll: Int
  count: newsletters_aggregated_count
  countDistinct: newsletters_aggregated_count
  avg: newsletters_aggregated_fields
  sum: newsletters_aggregated_fields
  avgDistinct: newsletters_aggregated_fields
  sumDistinct: newsletters_aggregated_fields
  min: newsletters_aggregated_fields
  max: newsletters_aggregated_fields
}

type newsletters_aggregated_count {
  id: Int
  email: Int
  created_at: Int
  optin: Int
  customers: Int
}

type newsletters_aggregated_fields {
  id: Float
}

type newsletters_customers {
  id: ID!
  newsletters_id(filter: newsletters_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): newsletters
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type newsletters_customers_aggregated {
  group: JSON
  countAll: Int
  count: newsletters_customers_aggregated_count
  countDistinct: newsletters_customers_aggregated_count
  avg: newsletters_customers_aggregated_fields
  sum: newsletters_customers_aggregated_fields
  avgDistinct: newsletters_customers_aggregated_fields
  sumDistinct: newsletters_customers_aggregated_fields
  min: newsletters_customers_aggregated_fields
  max: newsletters_customers_aggregated_fields
}

type newsletters_customers_aggregated_count {
  id: Int
  newsletters_id: Int
  customers_id: Int
}

type newsletters_customers_aggregated_fields {
  id: Float
  newsletters_id: Float
  customers_id: Float
}

input newsletters_customers_filter {
  id: number_filter_operators
  newsletters_id: newsletters_filter
  customers_id: customers_filter
  _and: [newsletters_customers_filter]
  _or: [newsletters_customers_filter]
}

type newsletters_customers_mutated {
  key: ID!
  event: EventEnum
  data: newsletters_customers
}

input newsletters_filter {
  id: number_filter_operators
  email: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  optin: boolean_filter_operators
  customers: newsletters_customers_filter
  customers_func: count_function_filter_operators
  _and: [newsletters_filter]
  _or: [newsletters_filter]
}

type newsletters_mutated {
  key: ID!
  event: EventEnum
  data: newsletters
}

input number_filter_operators {
  _eq: GraphQLStringOrFloat
  _neq: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _nin: [GraphQLStringOrFloat]
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

type pages {
  id: ID!
  status: String
  sort: Int
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  content: String
  list: JSON
  list_func: count_functions
  type: String
  link: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type pages_aggregated {
  group: JSON
  countAll: Int
  count: pages_aggregated_count
  countDistinct: pages_aggregated_count
  avg: pages_aggregated_fields
  sum: pages_aggregated_fields
  avgDistinct: pages_aggregated_fields
  sumDistinct: pages_aggregated_fields
  min: pages_aggregated_fields
  max: pages_aggregated_fields
}

type pages_aggregated_count {
  id: Int
  status: Int
  sort: Int
  date_created: Int
  date_updated: Int
  name: Int
  content: Int
  list: Int
  type: Int
  link: Int
  image: Int
}

type pages_aggregated_fields {
  id: Float
  sort: Float
}

input pages_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  content: string_filter_operators
  list: string_filter_operators
  list_func: count_function_filter_operators
  type: string_filter_operators
  link: string_filter_operators
  image: directus_files_filter
  _and: [pages_filter]
  _or: [pages_filter]
}

type pages_mutated {
  key: ID!
  event: EventEnum
  data: pages
}

type product_types {
  id: ID!
  name: String
  isShippable: Boolean
  products(filter: product_types_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [product_types_products]
  products_func: count_functions
}

type product_types_aggregated {
  group: JSON
  countAll: Int
  count: product_types_aggregated_count
  countDistinct: product_types_aggregated_count
  avg: product_types_aggregated_fields
  sum: product_types_aggregated_fields
  avgDistinct: product_types_aggregated_fields
  sumDistinct: product_types_aggregated_fields
  min: product_types_aggregated_fields
  max: product_types_aggregated_fields
}

type product_types_aggregated_count {
  id: Int
  name: Int
  isShippable: Int
  products: Int
}

type product_types_aggregated_fields {
  id: Float
}

input product_types_filter {
  id: number_filter_operators
  name: string_filter_operators
  isShippable: boolean_filter_operators
  products: product_types_products_filter
  products_func: count_function_filter_operators
  _and: [product_types_filter]
  _or: [product_types_filter]
}

type product_types_mutated {
  key: ID!
  event: EventEnum
  data: product_types
}

type product_types_products {
  id: ID!
  product_types_id(filter: product_types_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): product_types
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type product_types_products_aggregated {
  group: JSON
  countAll: Int
  count: product_types_products_aggregated_count
  countDistinct: product_types_products_aggregated_count
  avg: product_types_products_aggregated_fields
  sum: product_types_products_aggregated_fields
  avgDistinct: product_types_products_aggregated_fields
  sumDistinct: product_types_products_aggregated_fields
  min: product_types_products_aggregated_fields
  max: product_types_products_aggregated_fields
}

type product_types_products_aggregated_count {
  id: Int
  product_types_id: Int
  products_id: Int
}

type product_types_products_aggregated_fields {
  id: Float
  product_types_id: Float
  products_id: Float
}

input product_types_products_filter {
  id: number_filter_operators
  product_types_id: product_types_filter
  products_id: products_filter
  _and: [product_types_products_filter]
  _or: [product_types_products_filter]
}

type product_types_products_mutated {
  key: ID!
  event: EventEnum
  data: product_types_products
}

type products {
  id: ID!
  sku: GraphQLBigInt
  name: String
  tax_class: String
  stock_status: String
  weight: String
  created_at: Date
  created_at_func: datetime_functions
  height: String
  content: String
  part_number: String
  format: JSON
  format_func: count_functions
  file(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  type: String
  visibility: Boolean
  price: Float
  size: JSON
  size_func: count_functions
  rating: String
  attributes(filter: attributes_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [attributes_products]
  attributes_func: count_functions
  shops(filter: shops_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_products]
  shops_func: count_functions
  product_types(filter: product_types_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [product_types_products]
  product_types_func: count_functions
  customers(filter: customers_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [customers_products]
  customers_func: count_functions
  websites(filter: products_websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_websites]
  websites_func: count_functions
  cross_products(filter: products_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_products]
  cross_products_func: count_functions
  musicchart(filter: musicchart_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [musicchart_products]
  musicchart_func: count_functions
  faqsa(filter: products_helpa_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_helpa]
  faqsa_func: count_functions
  meeovistores(filter: meeovistores_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores_products]
  meeovistores_func: count_functions
  agreements(filter: agreements_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [agreements_products]
  agreements_func: count_functions
  brands(filter: brands_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_products]
  brands_func: count_functions
  newsfeed(filter: newsfeed_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [newsfeed_products]
  newsfeed_func: count_functions
  lists(filter: lists_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [lists_products]
  lists_func: count_functions
  coupons(filter: coupons_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [coupons_products]
  coupons_func: count_functions
  categories(filter: products_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_categories]
  categories_func: count_functions
  departments(filter: products_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_departments]
  departments_func: count_functions
  Space(filter: Space_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [Space_products]
  Space_func: count_functions
  shorts(filter: shorts_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shorts_products]
  shorts_func: count_functions
  comments(filter: comments_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [comments_products]
  comments_func: count_functions
  manufacturer(filter: products_manufacturer_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_manufacturer]
  manufacturer_func: count_functions
  countries(filter: products_countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_countries]
  countries_func: count_functions
  translations(filter: translations_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_products]
  translations_func: count_functions
  collections(filter: collections_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [collections_products]
  collections_func: count_functions
}

type products_aggregated {
  group: JSON
  countAll: Int
  count: products_aggregated_count
  countDistinct: products_aggregated_count
  avg: products_aggregated_fields
  sum: products_aggregated_fields
  avgDistinct: products_aggregated_fields
  sumDistinct: products_aggregated_fields
  min: products_aggregated_fields
  max: products_aggregated_fields
}

type products_aggregated_count {
  id: Int
  sku: Int
  name: Int
  tax_class: Int
  stock_status: Int
  weight: Int
  created_at: Int
  height: Int
  content: Int
  part_number: Int
  format: Int
  file: Int
  image: Int
  type: Int
  visibility: Int
  price: Int
  size: Int
  rating: Int
  attributes: Int
  shops: Int
  product_types: Int
  customers: Int
  websites: Int
  cross_products: Int
  musicchart: Int
  faqsa: Int
  meeovistores: Int
  agreements: Int
  brands: Int
  newsfeed: Int
  lists: Int
  coupons: Int
  categories: Int
  departments: Int
  Space: Int
  shorts: Int
  comments: Int
  manufacturer: Int
  countries: Int
  translations: Int
  collections: Int
}

type products_aggregated_fields {
  id: Float
  sku: Float
  price: Float
}

type products_categories {
  id: ID!
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
  categories_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
}

type products_categories_aggregated {
  group: JSON
  countAll: Int
  count: products_categories_aggregated_count
  countDistinct: products_categories_aggregated_count
  avg: products_categories_aggregated_fields
  sum: products_categories_aggregated_fields
  avgDistinct: products_categories_aggregated_fields
  sumDistinct: products_categories_aggregated_fields
  min: products_categories_aggregated_fields
  max: products_categories_aggregated_fields
}

type products_categories_aggregated_count {
  id: Int
  products_id: Int
  categories_id: Int
}

type products_categories_aggregated_fields {
  id: Float
  products_id: Float
  categories_id: Float
}

input products_categories_filter {
  id: number_filter_operators
  products_id: products_filter
  categories_id: categories_filter
  _and: [products_categories_filter]
  _or: [products_categories_filter]
}

type products_categories_mutated {
  key: ID!
  event: EventEnum
  data: products_categories
}

type products_countries {
  id: ID!
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
  countries_id(filter: countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): countries
}

type products_countries_aggregated {
  group: JSON
  countAll: Int
  count: products_countries_aggregated_count
  countDistinct: products_countries_aggregated_count
  avg: products_countries_aggregated_fields
  sum: products_countries_aggregated_fields
  avgDistinct: products_countries_aggregated_fields
  sumDistinct: products_countries_aggregated_fields
  min: products_countries_aggregated_fields
  max: products_countries_aggregated_fields
}

type products_countries_aggregated_count {
  id: Int
  products_id: Int
  countries_id: Int
}

type products_countries_aggregated_fields {
  id: Float
  products_id: Float
  countries_id: Float
}

input products_countries_filter {
  id: number_filter_operators
  products_id: products_filter
  countries_id: countries_filter
  _and: [products_countries_filter]
  _or: [products_countries_filter]
}

type products_countries_mutated {
  key: ID!
  event: EventEnum
  data: products_countries
}

type products_departments {
  id: ID!
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
  departments_id(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): departments
}

type products_departments_aggregated {
  group: JSON
  countAll: Int
  count: products_departments_aggregated_count
  countDistinct: products_departments_aggregated_count
  avg: products_departments_aggregated_fields
  sum: products_departments_aggregated_fields
  avgDistinct: products_departments_aggregated_fields
  sumDistinct: products_departments_aggregated_fields
  min: products_departments_aggregated_fields
  max: products_departments_aggregated_fields
}

type products_departments_aggregated_count {
  id: Int
  products_id: Int
  departments_id: Int
}

type products_departments_aggregated_fields {
  id: Float
  products_id: Float
  departments_id: Float
}

input products_departments_filter {
  id: number_filter_operators
  products_id: products_filter
  departments_id: departments_filter
  _and: [products_departments_filter]
  _or: [products_departments_filter]
}

type products_departments_mutated {
  key: ID!
  event: EventEnum
  data: products_departments
}

input products_filter {
  id: number_filter_operators
  sku: number_filter_operators
  name: string_filter_operators
  tax_class: string_filter_operators
  stock_status: string_filter_operators
  weight: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  height: string_filter_operators
  content: string_filter_operators
  part_number: string_filter_operators
  format: string_filter_operators
  format_func: count_function_filter_operators
  file: directus_files_filter
  image: directus_files_filter
  type: string_filter_operators
  visibility: boolean_filter_operators
  price: number_filter_operators
  size: string_filter_operators
  size_func: count_function_filter_operators
  rating: string_filter_operators
  attributes: attributes_products_filter
  attributes_func: count_function_filter_operators
  shops: shops_products_filter
  shops_func: count_function_filter_operators
  product_types: product_types_products_filter
  product_types_func: count_function_filter_operators
  customers: customers_products_filter
  customers_func: count_function_filter_operators
  websites: products_websites_filter
  websites_func: count_function_filter_operators
  cross_products: products_products_filter
  cross_products_func: count_function_filter_operators
  musicchart: musicchart_products_filter
  musicchart_func: count_function_filter_operators
  faqsa: products_helpa_filter
  faqsa_func: count_function_filter_operators
  meeovistores: meeovistores_products_filter
  meeovistores_func: count_function_filter_operators
  agreements: agreements_products_filter
  agreements_func: count_function_filter_operators
  brands: brands_products_filter
  brands_func: count_function_filter_operators
  newsfeed: newsfeed_products_filter
  newsfeed_func: count_function_filter_operators
  lists: lists_products_filter
  lists_func: count_function_filter_operators
  coupons: coupons_products_filter
  coupons_func: count_function_filter_operators
  categories: products_categories_filter
  categories_func: count_function_filter_operators
  departments: products_departments_filter
  departments_func: count_function_filter_operators
  Space: Space_products_filter
  Space_func: count_function_filter_operators
  shorts: shorts_products_filter
  shorts_func: count_function_filter_operators
  comments: comments_products_filter
  comments_func: count_function_filter_operators
  manufacturer: products_manufacturer_filter
  manufacturer_func: count_function_filter_operators
  countries: products_countries_filter
  countries_func: count_function_filter_operators
  translations: translations_products_filter
  translations_func: count_function_filter_operators
  collections: collections_products_filter
  collections_func: count_function_filter_operators
  _and: [products_filter]
  _or: [products_filter]
}

type products_helpa {
  id: ID!
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
  helpa_id(filter: helpa_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): helpa
}

type products_helpa_aggregated {
  group: JSON
  countAll: Int
  count: products_helpa_aggregated_count
  countDistinct: products_helpa_aggregated_count
  avg: products_helpa_aggregated_fields
  sum: products_helpa_aggregated_fields
  avgDistinct: products_helpa_aggregated_fields
  sumDistinct: products_helpa_aggregated_fields
  min: products_helpa_aggregated_fields
  max: products_helpa_aggregated_fields
}

type products_helpa_aggregated_count {
  id: Int
  products_id: Int
  helpa_id: Int
}

type products_helpa_aggregated_fields {
  id: Float
  products_id: Float
  helpa_id: Float
}

input products_helpa_filter {
  id: number_filter_operators
  products_id: products_filter
  helpa_id: helpa_filter
  _and: [products_helpa_filter]
  _or: [products_helpa_filter]
}

type products_helpa_mutated {
  key: ID!
  event: EventEnum
  data: products_helpa
}

type products_manufacturer {
  id: ID!
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
  manufacturer_id(filter: manufacturer_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): manufacturer
}

type products_manufacturer_aggregated {
  group: JSON
  countAll: Int
  count: products_manufacturer_aggregated_count
  countDistinct: products_manufacturer_aggregated_count
  avg: products_manufacturer_aggregated_fields
  sum: products_manufacturer_aggregated_fields
  avgDistinct: products_manufacturer_aggregated_fields
  sumDistinct: products_manufacturer_aggregated_fields
  min: products_manufacturer_aggregated_fields
  max: products_manufacturer_aggregated_fields
}

type products_manufacturer_aggregated_count {
  id: Int
  products_id: Int
  manufacturer_id: Int
}

type products_manufacturer_aggregated_fields {
  id: Float
  products_id: Float
  manufacturer_id: Float
}

input products_manufacturer_filter {
  id: number_filter_operators
  products_id: products_filter
  manufacturer_id: manufacturer_filter
  _and: [products_manufacturer_filter]
  _or: [products_manufacturer_filter]
}

type products_manufacturer_mutated {
  key: ID!
  event: EventEnum
  data: products_manufacturer
}

type products_mutated {
  key: ID!
  event: EventEnum
  data: products
}

type products_products {
  id: ID!
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
  related_products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type products_products_aggregated {
  group: JSON
  countAll: Int
  count: products_products_aggregated_count
  countDistinct: products_products_aggregated_count
  avg: products_products_aggregated_fields
  sum: products_products_aggregated_fields
  avgDistinct: products_products_aggregated_fields
  sumDistinct: products_products_aggregated_fields
  min: products_products_aggregated_fields
  max: products_products_aggregated_fields
}

type products_products_aggregated_count {
  id: Int
  products_id: Int
  related_products_id: Int
}

type products_products_aggregated_fields {
  id: Float
  products_id: Float
  related_products_id: Float
}

input products_products_filter {
  id: number_filter_operators
  products_id: products_filter
  related_products_id: products_filter
  _and: [products_products_filter]
  _or: [products_products_filter]
}

type products_products_mutated {
  key: ID!
  event: EventEnum
  data: products_products
}

type products_websites {
  id: ID!
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
  websites_id(filter: websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): websites
}

type products_websites_aggregated {
  group: JSON
  countAll: Int
  count: products_websites_aggregated_count
  countDistinct: products_websites_aggregated_count
  avg: products_websites_aggregated_fields
  sum: products_websites_aggregated_fields
  avgDistinct: products_websites_aggregated_fields
  sumDistinct: products_websites_aggregated_fields
  min: products_websites_aggregated_fields
  max: products_websites_aggregated_fields
}

type products_websites_aggregated_count {
  id: Int
  products_id: Int
  websites_id: Int
}

type products_websites_aggregated_fields {
  id: Float
  products_id: Float
  websites_id: Float
}

input products_websites_filter {
  id: number_filter_operators
  products_id: products_filter
  websites_id: websites_filter
  _and: [products_websites_filter]
  _or: [products_websites_filter]
}

type products_websites_mutated {
  key: ID!
  event: EventEnum
  data: products_websites
}

type Query {
  products_categories(filter: products_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_categories!]!
  products_categories_by_id(id: ID!, version: String): products_categories
  products_categories_aggregated(groupBy: [String], filter: products_categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_categories_aggregated!]!
  customers(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [customers!]!
  customers_by_id(id: ID!, version: String): customers
  customers_aggregated(groupBy: [String], filter: customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [customers_aggregated!]!
  brands_departments(filter: brands_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_departments!]!
  brands_departments_by_id(id: ID!, version: String): brands_departments
  brands_departments_aggregated(groupBy: [String], filter: brands_departments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [brands_departments_aggregated!]!
  pages(filter: pages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [pages!]!
  pages_by_id(id: ID!, version: String): pages
  pages_aggregated(groupBy: [String], filter: pages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages_aggregated!]!
  products_countries(filter: products_countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_countries!]!
  products_countries_by_id(id: ID!, version: String): products_countries
  products_countries_aggregated(groupBy: [String], filter: products_countries_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_countries_aggregated!]!
  Space_newsfeed(filter: Space_newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [Space_newsfeed!]!
  Space_newsfeed_by_id(id: ID!, version: String): Space_newsfeed
  Space_newsfeed_aggregated(groupBy: [String], filter: Space_newsfeed_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Space_newsfeed_aggregated!]!
  brands_customers(filter: brands_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_customers!]!
  brands_customers_by_id(id: ID!, version: String): brands_customers
  brands_customers_aggregated(groupBy: [String], filter: brands_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [brands_customers_aggregated!]!
  categories(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [categories!]!
  categories_by_id(id: ID!, version: String): categories
  categories_aggregated(groupBy: [String], filter: categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [categories_aggregated!]!
  newsletters_customers(filter: newsletters_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [newsletters_customers!]!
  newsletters_customers_by_id(id: ID!, version: String): newsletters_customers
  newsletters_customers_aggregated(groupBy: [String], filter: newsletters_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [newsletters_customers_aggregated!]!
  brands_shorts(filter: brands_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_shorts!]!
  brands_shorts_by_id(id: ID!, version: String): brands_shorts
  brands_shorts_aggregated(groupBy: [String], filter: brands_shorts_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [brands_shorts_aggregated!]!
  Space_products(filter: Space_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [Space_products!]!
  Space_products_by_id(id: ID!, version: String): Space_products
  Space_products_aggregated(groupBy: [String], filter: Space_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Space_products_aggregated!]!
  Space_shorts(filter: Space_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [Space_shorts!]!
  Space_shorts_by_id(id: ID!, version: String): Space_shorts
  Space_shorts_aggregated(groupBy: [String], filter: Space_shorts_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Space_shorts_aggregated!]!
  categories_departments(filter: categories_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [categories_departments!]!
  categories_departments_by_id(id: ID!, version: String): categories_departments
  categories_departments_aggregated(groupBy: [String], filter: categories_departments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [categories_departments_aggregated!]!
  products_manufacturer(filter: products_manufacturer_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_manufacturer!]!
  products_manufacturer_by_id(id: ID!, version: String): products_manufacturer
  products_manufacturer_aggregated(groupBy: [String], filter: products_manufacturer_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_manufacturer_aggregated!]!
  categories_shorts(filter: categories_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [categories_shorts!]!
  categories_shorts_by_id(id: ID!, version: String): categories_shorts
  categories_shorts_aggregated(groupBy: [String], filter: categories_shorts_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [categories_shorts_aggregated!]!
  categories_meeovistores(filter: categories_meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [categories_meeovistores!]!
  categories_meeovistores_by_id(id: ID!, version: String): categories_meeovistores
  categories_meeovistores_aggregated(groupBy: [String], filter: categories_meeovistores_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [categories_meeovistores_aggregated!]!
  lists_customers(filter: lists_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [lists_customers!]!
  lists_customers_by_id(id: ID!, version: String): lists_customers
  lists_customers_aggregated(groupBy: [String], filter: lists_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [lists_customers_aggregated!]!
  categories_customers(filter: categories_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [categories_customers!]!
  categories_customers_by_id(id: ID!, version: String): categories_customers
  categories_customers_aggregated(groupBy: [String], filter: categories_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [categories_customers_aggregated!]!
  reviews_customers(filter: reviews_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [reviews_customers!]!
  reviews_customers_by_id(id: ID!, version: String): reviews_customers
  reviews_customers_aggregated(groupBy: [String], filter: reviews_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [reviews_customers_aggregated!]!
  reviews_products(filter: reviews_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [reviews_products!]!
  reviews_products_by_id(id: ID!, version: String): reviews_products
  reviews_products_aggregated(groupBy: [String], filter: reviews_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [reviews_products_aggregated!]!
  lists_products(filter: lists_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [lists_products!]!
  lists_products_by_id(id: ID!, version: String): lists_products
  lists_products_aggregated(groupBy: [String], filter: lists_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [lists_products_aggregated!]!
  shops_categories(filter: shops_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_categories!]!
  shops_categories_by_id(id: ID!, version: String): shops_categories
  shops_categories_aggregated(groupBy: [String], filter: shops_categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [shops_categories_aggregated!]!
  tags(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags!]!
  tags_by_id(id: ID!, version: String): tags
  tags_aggregated(groupBy: [String], filter: tags_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [tags_aggregated!]!
  tags_products(filter: tags_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_products!]!
  tags_products_by_id(id: ID!, version: String): tags_products
  tags_products_aggregated(groupBy: [String], filter: tags_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [tags_products_aggregated!]!
  articles(filter: articles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles!]!
  articles_by_id(id: ID!, version: String): articles
  articles_aggregated(groupBy: [String], filter: articles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [articles_aggregated!]!
  products_departments(filter: products_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_departments!]!
  products_departments_by_id(id: ID!, version: String): products_departments
  products_departments_aggregated(groupBy: [String], filter: products_departments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_departments_aggregated!]!
  products_websites(filter: products_websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_websites!]!
  products_websites_by_id(id: ID!, version: String): products_websites
  products_websites_aggregated(groupBy: [String], filter: products_websites_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_websites_aggregated!]!
  agreements(filter: agreements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [agreements!]!
  agreements_by_id(id: ID!, version: String): agreements
  agreements_aggregated(groupBy: [String], filter: agreements_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [agreements_aggregated!]!
  brands(filter: brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands!]!
  brands_by_id(id: ID!, version: String): brands
  brands_aggregated(groupBy: [String], filter: brands_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [brands_aggregated!]!
  products_products(filter: products_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_products!]!
  products_products_by_id(id: ID!, version: String): products_products
  products_products_aggregated(groupBy: [String], filter: products_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_products_aggregated!]!
  cities_states(filter: cities_states_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [cities_states!]!
  cities_states_by_id(id: ID!, version: String): cities_states
  cities_states_aggregated(groupBy: [String], filter: cities_states_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [cities_states_aggregated!]!
  cities(filter: cities_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [cities!]!
  cities_by_id(id: ID!, version: String): cities
  cities_aggregated(groupBy: [String], filter: cities_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [cities_aggregated!]!
  musicchart_customers(filter: musicchart_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [musicchart_customers!]!
  musicchart_customers_by_id(id: ID!, version: String): musicchart_customers
  musicchart_customers_aggregated(groupBy: [String], filter: musicchart_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [musicchart_customers_aggregated!]!
  states_countries(filter: states_countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [states_countries!]!
  states_countries_by_id(id: ID!, version: String): states_countries
  states_countries_aggregated(groupBy: [String], filter: states_countries_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [states_countries_aggregated!]!
  cities_countries(filter: cities_countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [cities_countries!]!
  cities_countries_by_id(id: ID!, version: String): cities_countries
  cities_countries_aggregated(groupBy: [String], filter: cities_countries_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [cities_countries_aggregated!]!
  attributes_products(filter: attributes_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [attributes_products!]!
  attributes_products_by_id(id: ID!, version: String): attributes_products
  attributes_products_aggregated(groupBy: [String], filter: attributes_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [attributes_products_aggregated!]!
  collections(filter: collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [collections!]!
  collections_by_id(id: ID!, version: String): collections
  collections_aggregated(groupBy: [String], filter: collections_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [collections_aggregated!]!
  coupons(filter: coupons_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [coupons!]!
  coupons_by_id(id: ID!, version: String): coupons
  coupons_aggregated(groupBy: [String], filter: coupons_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [coupons_aggregated!]!
  comments(filter: comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [comments!]!
  comments_by_id(id: ID!, version: String): comments
  comments_aggregated(groupBy: [String], filter: comments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [comments_aggregated!]!
  musicchart_products(filter: musicchart_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [musicchart_products!]!
  musicchart_products_by_id(id: ID!, version: String): musicchart_products
  musicchart_products_aggregated(groupBy: [String], filter: musicchart_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [musicchart_products_aggregated!]!
  currency(filter: currency_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [currency!]!
  currency_by_id(id: ID!, version: String): currency
  currency_aggregated(groupBy: [String], filter: currency_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [currency_aggregated!]!
  tags_categories(filter: tags_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_categories!]!
  tags_categories_by_id(id: ID!, version: String): tags_categories
  tags_categories_aggregated(groupBy: [String], filter: tags_categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [tags_categories_aggregated!]!
  cities_customers(filter: cities_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [cities_customers!]!
  cities_customers_by_id(id: ID!, version: String): cities_customers
  cities_customers_aggregated(groupBy: [String], filter: cities_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [cities_customers_aggregated!]!
  articles_comments(filter: articles_comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles_comments!]!
  articles_comments_by_id(id: ID!, version: String): articles_comments
  articles_comments_aggregated(groupBy: [String], filter: articles_comments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [articles_comments_aggregated!]!
  shops_customers(filter: shops_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_customers!]!
  shops_customers_by_id(id: ID!, version: String): shops_customers
  shops_customers_aggregated(groupBy: [String], filter: shops_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [shops_customers_aggregated!]!
  websites_customers(filter: websites_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [websites_customers!]!
  websites_customers_by_id(id: ID!, version: String): websites_customers
  websites_customers_aggregated(groupBy: [String], filter: websites_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [websites_customers_aggregated!]!
  musicchart_categories(filter: musicchart_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [musicchart_categories!]!
  musicchart_categories_by_id(id: ID!, version: String): musicchart_categories
  musicchart_categories_aggregated(groupBy: [String], filter: musicchart_categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [musicchart_categories_aggregated!]!
  product_types_products(filter: product_types_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [product_types_products!]!
  product_types_products_by_id(id: ID!, version: String): product_types_products
  product_types_products_aggregated(groupBy: [String], filter: product_types_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [product_types_products_aggregated!]!
  articles_categories(filter: articles_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles_categories!]!
  articles_categories_by_id(id: ID!, version: String): articles_categories
  articles_categories_aggregated(groupBy: [String], filter: articles_categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [articles_categories_aggregated!]!
  shops_newsfeed(filter: shops_newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_newsfeed!]!
  shops_newsfeed_by_id(id: ID!, version: String): shops_newsfeed
  shops_newsfeed_aggregated(groupBy: [String], filter: shops_newsfeed_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [shops_newsfeed_aggregated!]!
  articles_departments(filter: articles_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles_departments!]!
  articles_departments_by_id(id: ID!, version: String): articles_departments
  articles_departments_aggregated(groupBy: [String], filter: articles_departments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [articles_departments_aggregated!]!
  meeovistores_customers(filter: meeovistores_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores_customers!]!
  meeovistores_customers_by_id(id: ID!, version: String): meeovistores_customers
  meeovistores_customers_aggregated(groupBy: [String], filter: meeovistores_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [meeovistores_customers_aggregated!]!
  collections_products(filter: collections_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [collections_products!]!
  collections_products_by_id(id: ID!, version: String): collections_products
  collections_products_aggregated(groupBy: [String], filter: collections_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [collections_products_aggregated!]!
  collections_brands(filter: collections_brands_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [collections_brands!]!
  collections_brands_by_id(id: ID!, version: String): collections_brands
  collections_brands_aggregated(groupBy: [String], filter: collections_brands_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [collections_brands_aggregated!]!
  manufacturer(filter: manufacturer_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [manufacturer!]!
  manufacturer_by_id(id: ID!, version: String): manufacturer
  manufacturer_aggregated(groupBy: [String], filter: manufacturer_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [manufacturer_aggregated!]!
  brands_products(filter: brands_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_products!]!
  brands_products_by_id(id: ID!, version: String): brands_products
  brands_products_aggregated(groupBy: [String], filter: brands_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [brands_products_aggregated!]!
  collections_customers(filter: collections_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [collections_customers!]!
  collections_customers_by_id(id: ID!, version: String): collections_customers
  collections_customers_aggregated(groupBy: [String], filter: collections_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [collections_customers_aggregated!]!
  meeovistores(filter: meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores!]!
  meeovistores_by_id(id: ID!, version: String): meeovistores
  meeovistores_aggregated(groupBy: [String], filter: meeovistores_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [meeovistores_aggregated!]!
  meeovistores_collections(filter: meeovistores_collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores_collections!]!
  meeovistores_collections_by_id(id: ID!, version: String): meeovistores_collections
  meeovistores_collections_aggregated(groupBy: [String], filter: meeovistores_collections_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [meeovistores_collections_aggregated!]!
  lists(filter: lists_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [lists!]!
  lists_by_id(id: ID!, version: String): lists
  lists_aggregated(groupBy: [String], filter: lists_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [lists_aggregated!]!
  meeovistores_products(filter: meeovistores_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores_products!]!
  meeovistores_products_by_id(id: ID!, version: String): meeovistores_products
  meeovistores_products_aggregated(groupBy: [String], filter: meeovistores_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [meeovistores_products_aggregated!]!
  helpq(filter: helpq_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [helpq!]!
  helpq_by_id(id: ID!, version: String): helpq
  helpq_aggregated(groupBy: [String], filter: helpq_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [helpq_aggregated!]!
  meeovistores_websites(filter: meeovistores_websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores_websites!]!
  meeovistores_websites_by_id(id: ID!, version: String): meeovistores_websites
  meeovistores_websites_aggregated(groupBy: [String], filter: meeovistores_websites_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [meeovistores_websites_aggregated!]!
  newsfeed_customers(filter: newsfeed_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [newsfeed_customers!]!
  newsfeed_customers_by_id(id: ID!, version: String): newsfeed_customers
  newsfeed_customers_aggregated(groupBy: [String], filter: newsfeed_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [newsfeed_customers_aggregated!]!
  comments_customers(filter: comments_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [comments_customers!]!
  comments_customers_by_id(id: ID!, version: String): comments_customers
  comments_customers_aggregated(groupBy: [String], filter: comments_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [comments_customers_aggregated!]!
  brands_manufacturer(filter: brands_manufacturer_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_manufacturer!]!
  brands_manufacturer_by_id(id: ID!, version: String): brands_manufacturer
  brands_manufacturer_aggregated(groupBy: [String], filter: brands_manufacturer_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [brands_manufacturer_aggregated!]!
  comments_shorts(filter: comments_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [comments_shorts!]!
  comments_shorts_by_id(id: ID!, version: String): comments_shorts
  comments_shorts_aggregated(groupBy: [String], filter: comments_shorts_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [comments_shorts_aggregated!]!
  shorts(filter: shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shorts!]!
  shorts_by_id(id: ID!, version: String): shorts
  shorts_aggregated(groupBy: [String], filter: shorts_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [shorts_aggregated!]!
  comments_products(filter: comments_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [comments_products!]!
  comments_products_by_id(id: ID!, version: String): comments_products
  comments_products_aggregated(groupBy: [String], filter: comments_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [comments_products_aggregated!]!
  brands_categories(filter: brands_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_categories!]!
  brands_categories_by_id(id: ID!, version: String): brands_categories
  brands_categories_aggregated(groupBy: [String], filter: brands_categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [brands_categories_aggregated!]!
  newsfeed_products(filter: newsfeed_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [newsfeed_products!]!
  newsfeed_products_by_id(id: ID!, version: String): newsfeed_products
  newsfeed_products_aggregated(groupBy: [String], filter: newsfeed_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [newsfeed_products_aggregated!]!
  helpa(filter: helpa_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [helpa!]!
  helpa_by_id(id: ID!, version: String): helpa
  helpa_aggregated(groupBy: [String], filter: helpa_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [helpa_aggregated!]!
  coupons_customers(filter: coupons_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [coupons_customers!]!
  coupons_customers_by_id(id: ID!, version: String): coupons_customers
  coupons_customers_aggregated(groupBy: [String], filter: coupons_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [coupons_customers_aggregated!]!
  product_types(filter: product_types_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [product_types!]!
  product_types_by_id(id: ID!, version: String): product_types
  product_types_aggregated(groupBy: [String], filter: product_types_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [product_types_aggregated!]!
  tags_shorts(filter: tags_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_shorts!]!
  tags_shorts_by_id(id: ID!, version: String): tags_shorts
  tags_shorts_aggregated(groupBy: [String], filter: tags_shorts_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [tags_shorts_aggregated!]!
  shops(filter: shops_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops!]!
  shops_by_id(id: ID!, version: String): shops
  shops_aggregated(groupBy: [String], filter: shops_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [shops_aggregated!]!
  customers_Space(filter: customers_Space_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [customers_Space!]!
  customers_Space_by_id(id: ID!, version: String): customers_Space
  customers_Space_aggregated(groupBy: [String], filter: customers_Space_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [customers_Space_aggregated!]!
  shops_agreements(filter: shops_agreements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_agreements!]!
  shops_agreements_by_id(id: ID!, version: String): shops_agreements
  shops_agreements_aggregated(groupBy: [String], filter: shops_agreements_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [shops_agreements_aggregated!]!
  customers_shorts(filter: customers_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [customers_shorts!]!
  customers_shorts_by_id(id: ID!, version: String): customers_shorts
  customers_shorts_aggregated(groupBy: [String], filter: customers_shorts_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [customers_shorts_aggregated!]!
  coupons_products(filter: coupons_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [coupons_products!]!
  coupons_products_by_id(id: ID!, version: String): coupons_products
  coupons_products_aggregated(groupBy: [String], filter: coupons_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [coupons_products_aggregated!]!
  tags_departments(filter: tags_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_departments!]!
  tags_departments_by_id(id: ID!, version: String): tags_departments
  tags_departments_aggregated(groupBy: [String], filter: tags_departments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [tags_departments_aggregated!]!
  countries(filter: countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [countries!]!
  countries_by_id(id: ID!, version: String): countries
  countries_aggregated(groupBy: [String], filter: countries_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [countries_aggregated!]!
  shops_products(filter: shops_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_products!]!
  shops_products_by_id(id: ID!, version: String): shops_products
  shops_products_aggregated(groupBy: [String], filter: shops_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [shops_products_aggregated!]!
  products(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products!]!
  products_by_id(id: ID!, version: String): products
  products_aggregated(groupBy: [String], filter: products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_aggregated!]!
  products_helpa(filter: products_helpa_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_helpa!]!
  products_helpa_by_id(id: ID!, version: String): products_helpa
  products_helpa_aggregated(groupBy: [String], filter: products_helpa_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_helpa_aggregated!]!
  translations(filter: translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations!]!
  translations_by_id(id: ID!, version: String): translations
  translations_aggregated(groupBy: [String], filter: translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [translations_aggregated!]!
  translations_products(filter: translations_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_products!]!
  translations_products_by_id(id: ID!, version: String): translations_products
  translations_products_aggregated(groupBy: [String], filter: translations_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [translations_products_aggregated!]!
  customers_products(filter: customers_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [customers_products!]!
  customers_products_by_id(id: ID!, version: String): customers_products
  customers_products_aggregated(groupBy: [String], filter: customers_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [customers_products_aggregated!]!
  rewards(filter: rewards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [rewards!]!
  rewards_by_id(id: ID!, version: String): rewards
  rewards_aggregated(groupBy: [String], filter: rewards_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [rewards_aggregated!]!
  departments_customers(filter: departments_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments_customers!]!
  departments_customers_by_id(id: ID!, version: String): departments_customers
  departments_customers_aggregated(groupBy: [String], filter: departments_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [departments_customers_aggregated!]!
  departments_shorts(filter: departments_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments_shorts!]!
  departments_shorts_by_id(id: ID!, version: String): departments_shorts
  departments_shorts_aggregated(groupBy: [String], filter: departments_shorts_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [departments_shorts_aggregated!]!
  shipments(filter: shipments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shipments!]!
  shipments_by_id(id: ID!, version: String): shipments
  shipments_aggregated(groupBy: [String], filter: shipments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [shipments_aggregated!]!
  special_discounts(filter: special_discounts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [special_discounts!]!
  special_discounts_by_id(id: ID!, version: String): special_discounts
  special_discounts_aggregated(groupBy: [String], filter: special_discounts_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [special_discounts_aggregated!]!
  departments_collections(filter: departments_collections_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments_collections!]!
  departments_collections_by_id(id: ID!, version: String): departments_collections
  departments_collections_aggregated(groupBy: [String], filter: departments_collections_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [departments_collections_aggregated!]!
  digiboard_comments(filter: digiboard_comments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [digiboard_comments!]!
  digiboard_comments_by_id(id: ID!, version: String): digiboard_comments
  digiboard_comments_aggregated(groupBy: [String], filter: digiboard_comments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [digiboard_comments_aggregated!]!
  departments_categories(filter: departments_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments_categories!]!
  departments_categories_by_id(id: ID!, version: String): departments_categories
  departments_categories_aggregated(groupBy: [String], filter: departments_categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [departments_categories_aggregated!]!
  digiboard_customers(filter: digiboard_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [digiboard_customers!]!
  digiboard_customers_by_id(id: ID!, version: String): digiboard_customers
  digiboard_customers_aggregated(groupBy: [String], filter: digiboard_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [digiboard_customers_aggregated!]!
  warehouse(filter: warehouse_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [warehouse!]!
  warehouse_by_id(id: ID!, version: String): warehouse
  warehouse_aggregated(groupBy: [String], filter: warehouse_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [warehouse_aggregated!]!
  shops_departments(filter: shops_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_departments!]!
  shops_departments_by_id(id: ID!, version: String): shops_departments
  shops_departments_aggregated(groupBy: [String], filter: shops_departments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [shops_departments_aggregated!]!
  currencies_countries(filter: currencies_countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [currencies_countries!]!
  currencies_countries_by_id(id: ID!, version: String): currencies_countries
  currencies_countries_aggregated(groupBy: [String], filter: currencies_countries_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [currencies_countries_aggregated!]!
  websites(filter: websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [websites!]!
  websites_by_id(id: ID!, version: String): websites
  websites_aggregated(groupBy: [String], filter: websites_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [websites_aggregated!]!
  shops_files(filter: shops_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_files!]!
  shops_files_by_id(id: ID!, version: String): shops_files
  shops_files_aggregated(groupBy: [String], filter: shops_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [shops_files_aggregated!]!
  musicchart(filter: musicchart_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [musicchart!]!
  musicchart_by_id(id: ID!, version: String): musicchart
  musicchart_aggregated(groupBy: [String], filter: musicchart_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [musicchart_aggregated!]!
  currency_departments(filter: currency_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [currency_departments!]!
  currency_departments_by_id(id: ID!, version: String): currency_departments
  currency_departments_aggregated(groupBy: [String], filter: currency_departments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [currency_departments_aggregated!]!
  currency_customers(filter: currency_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [currency_customers!]!
  currency_customers_by_id(id: ID!, version: String): currency_customers
  currency_customers_aggregated(groupBy: [String], filter: currency_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [currency_customers_aggregated!]!
  tags_articles(filter: tags_articles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_articles!]!
  tags_articles_by_id(id: ID!, version: String): tags_articles
  tags_articles_aggregated(groupBy: [String], filter: tags_articles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [tags_articles_aggregated!]!
  attributes(filter: attributes_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [attributes!]!
  attributes_by_id(id: ID!, version: String): attributes
  attributes_aggregated(groupBy: [String], filter: attributes_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [attributes_aggregated!]!
  departments(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments!]!
  departments_by_id(id: ID!, version: String): departments
  departments_aggregated(groupBy: [String], filter: departments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [departments_aggregated!]!
  shorts_products(filter: shorts_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shorts_products!]!
  shorts_products_by_id(id: ID!, version: String): shorts_products
  shorts_products_aggregated(groupBy: [String], filter: shorts_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [shorts_products_aggregated!]!
  digiboard_categories(filter: digiboard_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [digiboard_categories!]!
  digiboard_categories_by_id(id: ID!, version: String): digiboard_categories
  digiboard_categories_aggregated(groupBy: [String], filter: digiboard_categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [digiboard_categories_aggregated!]!
  digiboard(filter: digiboard_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [digiboard!]!
  digiboard_by_id(id: ID!, version: String): digiboard
  digiboard_aggregated(groupBy: [String], filter: digiboard_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [digiboard_aggregated!]!
  newsletters(filter: newsletters_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [newsletters!]!
  newsletters_by_id(id: ID!, version: String): newsletters
  newsletters_aggregated(groupBy: [String], filter: newsletters_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [newsletters_aggregated!]!
  Space(filter: Space_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [Space!]!
  Space_by_id(id: ID!, version: String): Space
  Space_aggregated(groupBy: [String], filter: Space_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Space_aggregated!]!
  newsfeed(filter: newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [newsfeed!]!
  newsfeed_by_id(id: ID!, version: String): newsfeed
  newsfeed_aggregated(groupBy: [String], filter: newsfeed_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [newsfeed_aggregated!]!
  agreements_customers(filter: agreements_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [agreements_customers!]!
  agreements_customers_by_id(id: ID!, version: String): agreements_customers
  agreements_customers_aggregated(groupBy: [String], filter: agreements_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [agreements_customers_aggregated!]!
  agreements_products(filter: agreements_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [agreements_products!]!
  agreements_products_by_id(id: ID!, version: String): agreements_products
  agreements_products_aggregated(groupBy: [String], filter: agreements_products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [agreements_products_aggregated!]!
  translations_customers(filter: translations_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_customers!]!
  translations_customers_by_id(id: ID!, version: String): translations_customers
  translations_customers_aggregated(groupBy: [String], filter: translations_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [translations_customers_aggregated!]!
  translations_departments(filter: translations_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_departments!]!
  translations_departments_by_id(id: ID!, version: String): translations_departments
  translations_departments_aggregated(groupBy: [String], filter: translations_departments_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [translations_departments_aggregated!]!
  translations_meeovistores(filter: translations_meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_meeovistores!]!
  translations_meeovistores_by_id(id: ID!, version: String): translations_meeovistores
  translations_meeovistores_aggregated(groupBy: [String], filter: translations_meeovistores_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [translations_meeovistores_aggregated!]!
  articles_customers(filter: articles_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [articles_customers!]!
  articles_customers_by_id(id: ID!, version: String): articles_customers
  articles_customers_aggregated(groupBy: [String], filter: articles_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [articles_customers_aggregated!]!
  translations_websites(filter: translations_websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_websites!]!
  translations_websites_by_id(id: ID!, version: String): translations_websites
  translations_websites_aggregated(groupBy: [String], filter: translations_websites_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [translations_websites_aggregated!]!
  careers(filter: careers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [careers!]!
  careers_by_id(id: ID!, version: String): careers
  careers_aggregated(groupBy: [String], filter: careers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [careers_aggregated!]!
  states_cities(filter: states_cities_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [states_cities!]!
  states_cities_by_id(id: ID!, version: String): states_cities
  states_cities_aggregated(groupBy: [String], filter: states_cities_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [states_cities_aggregated!]!
  careers_customers(filter: careers_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [careers_customers!]!
  careers_customers_by_id(id: ID!, version: String): careers_customers
  careers_customers_aggregated(groupBy: [String], filter: careers_customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [careers_customers_aggregated!]!
  states(filter: states_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [states!]!
  states_by_id(id: ID!, version: String): states
  states_aggregated(groupBy: [String], filter: states_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [states_aggregated!]!
}

type reviews_customers {
  id: ID!
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type reviews_customers_aggregated {
  group: JSON
  countAll: Int
  count: reviews_customers_aggregated_count
  countDistinct: reviews_customers_aggregated_count
  avg: reviews_customers_aggregated_fields
  sum: reviews_customers_aggregated_fields
  avgDistinct: reviews_customers_aggregated_fields
  sumDistinct: reviews_customers_aggregated_fields
  min: reviews_customers_aggregated_fields
  max: reviews_customers_aggregated_fields
}

type reviews_customers_aggregated_count {
  id: Int
  customers_id: Int
}

type reviews_customers_aggregated_fields {
  id: Float
  customers_id: Float
}

input reviews_customers_filter {
  id: number_filter_operators
  customers_id: customers_filter
  _and: [reviews_customers_filter]
  _or: [reviews_customers_filter]
}

type reviews_customers_mutated {
  key: ID!
  event: EventEnum
  data: reviews_customers
}

type reviews_products {
  id: ID!
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type reviews_products_aggregated {
  group: JSON
  countAll: Int
  count: reviews_products_aggregated_count
  countDistinct: reviews_products_aggregated_count
  avg: reviews_products_aggregated_fields
  sum: reviews_products_aggregated_fields
  avgDistinct: reviews_products_aggregated_fields
  sumDistinct: reviews_products_aggregated_fields
  min: reviews_products_aggregated_fields
  max: reviews_products_aggregated_fields
}

type reviews_products_aggregated_count {
  id: Int
  products_id: Int
}

type reviews_products_aggregated_fields {
  id: Float
  products_id: Float
}

input reviews_products_filter {
  id: number_filter_operators
  products_id: products_filter
  _and: [reviews_products_filter]
  _or: [reviews_products_filter]
}

type reviews_products_mutated {
  key: ID!
  event: EventEnum
  data: reviews_products
}

type rewards {
  id: ID!
  name: String!
  slug: String
  level: String
  created_at: Date
  created_at_func: datetime_functions
  coupons: String
  expiration: String
  categories: String
  articles: String
  products: String
  customers: String
  users: String
}

type rewards_aggregated {
  group: JSON
  countAll: Int
  count: rewards_aggregated_count
  countDistinct: rewards_aggregated_count
  avg: rewards_aggregated_fields
  sum: rewards_aggregated_fields
  avgDistinct: rewards_aggregated_fields
  sumDistinct: rewards_aggregated_fields
  min: rewards_aggregated_fields
  max: rewards_aggregated_fields
}

type rewards_aggregated_count {
  id: Int
  name: Int
  slug: Int
  level: Int
  created_at: Int
  coupons: Int
  expiration: Int
  categories: Int
  articles: Int
  products: Int
  customers: Int
  users: Int
}

type rewards_aggregated_fields {
  id: Float
}

input rewards_filter {
  id: number_filter_operators
  name: string_filter_operators
  slug: string_filter_operators
  level: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  coupons: string_filter_operators
  expiration: string_filter_operators
  categories: string_filter_operators
  articles: string_filter_operators
  products: string_filter_operators
  customers: string_filter_operators
  users: string_filter_operators
  _and: [rewards_filter]
  _or: [rewards_filter]
}

type rewards_mutated {
  key: ID!
  event: EventEnum
  data: rewards
}

type shipments {
  product: String
  speed_grade: String
  ship_date: Date
  ship_date_func: datetime_functions
  carrier_name: String!
  transit_time: String
  tracking_url: String
  image: String
  id: ID!
  client_id: String
  client_secret: String
  country: String
  website: String
}

type shipments_aggregated {
  group: JSON
  countAll: Int
  count: shipments_aggregated_count
  countDistinct: shipments_aggregated_count
}

type shipments_aggregated_count {
  product: Int
  speed_grade: Int
  ship_date: Int
  carrier_name: Int
  transit_time: Int
  tracking_url: Int
  image: Int
  id: Int
  client_id: Int
  client_secret: Int
  country: Int
  website: Int
}

input shipments_filter {
  product: string_filter_operators
  speed_grade: string_filter_operators
  ship_date: date_filter_operators
  ship_date_func: datetime_function_filter_operators
  carrier_name: string_filter_operators
  transit_time: string_filter_operators
  tracking_url: string_filter_operators
  image: string_filter_operators
  id: number_filter_operators
  client_id: string_filter_operators
  client_secret: string_filter_operators
  country: string_filter_operators
  website: string_filter_operators
  _and: [shipments_filter]
  _or: [shipments_filter]
}

type shipments_mutated {
  key: ID!
  event: EventEnum
  data: shipments
}

type shops {
  id: ID!
  status: String
  sort: Int
  user_created: String
  date_created: Date
  date_created_func: datetime_functions
  user_updated: String
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  content: String
  website: String
  customers(filter: shops_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_customers]
  customers_func: count_functions
  products(filter: shops_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_products]
  products_func: count_functions
  media(filter: shops_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_files]
  media_func: count_functions
  departments(filter: shops_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_departments]
  departments_func: count_functions
  categories(filter: shops_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_categories]
  categories_func: count_functions
  newsfeed(filter: shops_newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_newsfeed]
  newsfeed_func: count_functions
  agreements(filter: shops_agreements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shops_agreements]
  agreements_func: count_functions
}

type shops_aggregated {
  group: JSON
  countAll: Int
  count: shops_aggregated_count
  countDistinct: shops_aggregated_count
  avg: shops_aggregated_fields
  sum: shops_aggregated_fields
  avgDistinct: shops_aggregated_fields
  sumDistinct: shops_aggregated_fields
  min: shops_aggregated_fields
  max: shops_aggregated_fields
}

type shops_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  name: Int
  content: Int
  website: Int
  customers: Int
  products: Int
  media: Int
  departments: Int
  categories: Int
  newsfeed: Int
  agreements: Int
}

type shops_aggregated_fields {
  id: Float
  sort: Float
}

type shops_agreements {
  id: ID!
  shops_id(filter: shops_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shops
  agreements_id(filter: agreements_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): agreements
}

type shops_agreements_aggregated {
  group: JSON
  countAll: Int
  count: shops_agreements_aggregated_count
  countDistinct: shops_agreements_aggregated_count
  avg: shops_agreements_aggregated_fields
  sum: shops_agreements_aggregated_fields
  avgDistinct: shops_agreements_aggregated_fields
  sumDistinct: shops_agreements_aggregated_fields
  min: shops_agreements_aggregated_fields
  max: shops_agreements_aggregated_fields
}

type shops_agreements_aggregated_count {
  id: Int
  shops_id: Int
  agreements_id: Int
}

type shops_agreements_aggregated_fields {
  id: Float
  shops_id: Float
  agreements_id: Float
}

input shops_agreements_filter {
  id: number_filter_operators
  shops_id: shops_filter
  agreements_id: agreements_filter
  _and: [shops_agreements_filter]
  _or: [shops_agreements_filter]
}

type shops_agreements_mutated {
  key: ID!
  event: EventEnum
  data: shops_agreements
}

type shops_categories {
  id: ID!
  shops_id(filter: shops_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shops
  categories_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
}

type shops_categories_aggregated {
  group: JSON
  countAll: Int
  count: shops_categories_aggregated_count
  countDistinct: shops_categories_aggregated_count
  avg: shops_categories_aggregated_fields
  sum: shops_categories_aggregated_fields
  avgDistinct: shops_categories_aggregated_fields
  sumDistinct: shops_categories_aggregated_fields
  min: shops_categories_aggregated_fields
  max: shops_categories_aggregated_fields
}

type shops_categories_aggregated_count {
  id: Int
  shops_id: Int
  categories_id: Int
}

type shops_categories_aggregated_fields {
  id: Float
  shops_id: Float
  categories_id: Float
}

input shops_categories_filter {
  id: number_filter_operators
  shops_id: shops_filter
  categories_id: categories_filter
  _and: [shops_categories_filter]
  _or: [shops_categories_filter]
}

type shops_categories_mutated {
  key: ID!
  event: EventEnum
  data: shops_categories
}

type shops_customers {
  id: ID!
  shops_id(filter: shops_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shops
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type shops_customers_aggregated {
  group: JSON
  countAll: Int
  count: shops_customers_aggregated_count
  countDistinct: shops_customers_aggregated_count
  avg: shops_customers_aggregated_fields
  sum: shops_customers_aggregated_fields
  avgDistinct: shops_customers_aggregated_fields
  sumDistinct: shops_customers_aggregated_fields
  min: shops_customers_aggregated_fields
  max: shops_customers_aggregated_fields
}

type shops_customers_aggregated_count {
  id: Int
  shops_id: Int
  customers_id: Int
}

type shops_customers_aggregated_fields {
  id: Float
  shops_id: Float
  customers_id: Float
}

input shops_customers_filter {
  id: number_filter_operators
  shops_id: shops_filter
  customers_id: customers_filter
  _and: [shops_customers_filter]
  _or: [shops_customers_filter]
}

type shops_customers_mutated {
  key: ID!
  event: EventEnum
  data: shops_customers
}

type shops_departments {
  id: ID!
  shops_id(filter: shops_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shops
  departments_id(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): departments
}

type shops_departments_aggregated {
  group: JSON
  countAll: Int
  count: shops_departments_aggregated_count
  countDistinct: shops_departments_aggregated_count
  avg: shops_departments_aggregated_fields
  sum: shops_departments_aggregated_fields
  avgDistinct: shops_departments_aggregated_fields
  sumDistinct: shops_departments_aggregated_fields
  min: shops_departments_aggregated_fields
  max: shops_departments_aggregated_fields
}

type shops_departments_aggregated_count {
  id: Int
  shops_id: Int
  departments_id: Int
}

type shops_departments_aggregated_fields {
  id: Float
  shops_id: Float
  departments_id: Float
}

input shops_departments_filter {
  id: number_filter_operators
  shops_id: shops_filter
  departments_id: departments_filter
  _and: [shops_departments_filter]
  _or: [shops_departments_filter]
}

type shops_departments_mutated {
  key: ID!
  event: EventEnum
  data: shops_departments
}

type shops_files {
  id: ID!
  shops_id(filter: shops_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shops
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type shops_files_aggregated {
  group: JSON
  countAll: Int
  count: shops_files_aggregated_count
  countDistinct: shops_files_aggregated_count
  avg: shops_files_aggregated_fields
  sum: shops_files_aggregated_fields
  avgDistinct: shops_files_aggregated_fields
  sumDistinct: shops_files_aggregated_fields
  min: shops_files_aggregated_fields
  max: shops_files_aggregated_fields
}

type shops_files_aggregated_count {
  id: Int
  shops_id: Int
  directus_files_id: Int
}

type shops_files_aggregated_fields {
  id: Float
  shops_id: Float
}

input shops_files_filter {
  id: number_filter_operators
  shops_id: shops_filter
  directus_files_id: directus_files_filter
  _and: [shops_files_filter]
  _or: [shops_files_filter]
}

type shops_files_mutated {
  key: ID!
  event: EventEnum
  data: shops_files
}

input shops_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: string_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  content: string_filter_operators
  website: string_filter_operators
  customers: shops_customers_filter
  customers_func: count_function_filter_operators
  products: shops_products_filter
  products_func: count_function_filter_operators
  media: shops_files_filter
  media_func: count_function_filter_operators
  departments: shops_departments_filter
  departments_func: count_function_filter_operators
  categories: shops_categories_filter
  categories_func: count_function_filter_operators
  newsfeed: shops_newsfeed_filter
  newsfeed_func: count_function_filter_operators
  agreements: shops_agreements_filter
  agreements_func: count_function_filter_operators
  _and: [shops_filter]
  _or: [shops_filter]
}

type shops_mutated {
  key: ID!
  event: EventEnum
  data: shops
}

type shops_newsfeed {
  id: ID!
  shops_id(filter: shops_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shops
  newsfeed_id(filter: newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): newsfeed
}

type shops_newsfeed_aggregated {
  group: JSON
  countAll: Int
  count: shops_newsfeed_aggregated_count
  countDistinct: shops_newsfeed_aggregated_count
  avg: shops_newsfeed_aggregated_fields
  sum: shops_newsfeed_aggregated_fields
  avgDistinct: shops_newsfeed_aggregated_fields
  sumDistinct: shops_newsfeed_aggregated_fields
  min: shops_newsfeed_aggregated_fields
  max: shops_newsfeed_aggregated_fields
}

type shops_newsfeed_aggregated_count {
  id: Int
  shops_id: Int
  newsfeed_id: Int
}

type shops_newsfeed_aggregated_fields {
  id: Float
  shops_id: Float
  newsfeed_id: Float
}

input shops_newsfeed_filter {
  id: number_filter_operators
  shops_id: shops_filter
  newsfeed_id: newsfeed_filter
  _and: [shops_newsfeed_filter]
  _or: [shops_newsfeed_filter]
}

type shops_newsfeed_mutated {
  key: ID!
  event: EventEnum
  data: shops_newsfeed
}

type shops_products {
  id: ID!
  shops_id(filter: shops_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shops
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type shops_products_aggregated {
  group: JSON
  countAll: Int
  count: shops_products_aggregated_count
  countDistinct: shops_products_aggregated_count
  avg: shops_products_aggregated_fields
  sum: shops_products_aggregated_fields
  avgDistinct: shops_products_aggregated_fields
  sumDistinct: shops_products_aggregated_fields
  min: shops_products_aggregated_fields
  max: shops_products_aggregated_fields
}

type shops_products_aggregated_count {
  id: Int
  shops_id: Int
  products_id: Int
}

type shops_products_aggregated_fields {
  id: Float
  shops_id: Float
  products_id: Float
}

input shops_products_filter {
  id: number_filter_operators
  shops_id: shops_filter
  products_id: products_filter
  _and: [shops_products_filter]
  _or: [shops_products_filter]
}

type shops_products_mutated {
  key: ID!
  event: EventEnum
  data: shops_products
}

type shorts {
  id: ID!
  status: String
  sort: Int
  user_created: String
  date_created: Date
  date_created_func: datetime_functions
  user_updated: String
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  description: String
  video(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  brands(filter: brands_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [brands_shorts]
  brands_func: count_functions
  comments(filter: comments_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [comments_shorts]
  comments_func: count_functions
  customers(filter: customers_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [customers_shorts]
  customers_func: count_functions
  Space(filter: Space_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [Space_shorts]
  Space_func: count_functions
  departments(filter: departments_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [departments_shorts]
  departments_func: count_functions
  products(filter: shorts_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [shorts_products]
  products_func: count_functions
  tags(filter: tags_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_shorts]
  tags_func: count_functions
}

type shorts_aggregated {
  group: JSON
  countAll: Int
  count: shorts_aggregated_count
  countDistinct: shorts_aggregated_count
  avg: shorts_aggregated_fields
  sum: shorts_aggregated_fields
  avgDistinct: shorts_aggregated_fields
  sumDistinct: shorts_aggregated_fields
  min: shorts_aggregated_fields
  max: shorts_aggregated_fields
}

type shorts_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  name: Int
  description: Int
  video: Int
  brands: Int
  comments: Int
  customers: Int
  Space: Int
  departments: Int
  products: Int
  tags: Int
}

type shorts_aggregated_fields {
  id: Float
  sort: Float
}

input shorts_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: string_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  video: directus_files_filter
  brands: brands_shorts_filter
  brands_func: count_function_filter_operators
  comments: comments_shorts_filter
  comments_func: count_function_filter_operators
  customers: customers_shorts_filter
  customers_func: count_function_filter_operators
  Space: Space_shorts_filter
  Space_func: count_function_filter_operators
  departments: departments_shorts_filter
  departments_func: count_function_filter_operators
  products: shorts_products_filter
  products_func: count_function_filter_operators
  tags: tags_shorts_filter
  tags_func: count_function_filter_operators
  _and: [shorts_filter]
  _or: [shorts_filter]
}

type shorts_mutated {
  key: ID!
  event: EventEnum
  data: shorts
}

type shorts_products {
  id: ID!
  shorts_id(filter: shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shorts
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type shorts_products_aggregated {
  group: JSON
  countAll: Int
  count: shorts_products_aggregated_count
  countDistinct: shorts_products_aggregated_count
  avg: shorts_products_aggregated_fields
  sum: shorts_products_aggregated_fields
  avgDistinct: shorts_products_aggregated_fields
  sumDistinct: shorts_products_aggregated_fields
  min: shorts_products_aggregated_fields
  max: shorts_products_aggregated_fields
}

type shorts_products_aggregated_count {
  id: Int
  shorts_id: Int
  products_id: Int
}

type shorts_products_aggregated_fields {
  id: Float
  shorts_id: Float
  products_id: Float
}

input shorts_products_filter {
  id: number_filter_operators
  shorts_id: shorts_filter
  products_id: products_filter
  _and: [shorts_products_filter]
  _or: [shorts_products_filter]
}

type shorts_products_mutated {
  key: ID!
  event: EventEnum
  data: shorts_products
}

type Space {
  id: ID!
  status: String
  sort: Int
  user_created: String
  date_created: Date
  date_created_func: datetime_functions
  user_updated: String
  date_updated: Date
  date_updated_func: datetime_functions
  Name: String
  Description: String
  Image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  customers(filter: customers_Space_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [customers_Space]
  customers_func: count_functions
  newsfeed(filter: Space_newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [Space_newsfeed]
  newsfeed_func: count_functions
  products(filter: Space_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [Space_products]
  products_func: count_functions
  shorts(filter: Space_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [Space_shorts]
  shorts_func: count_functions
}

type Space_aggregated {
  group: JSON
  countAll: Int
  count: Space_aggregated_count
  countDistinct: Space_aggregated_count
  avg: Space_aggregated_fields
  sum: Space_aggregated_fields
  avgDistinct: Space_aggregated_fields
  sumDistinct: Space_aggregated_fields
  min: Space_aggregated_fields
  max: Space_aggregated_fields
}

type Space_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  Name: Int
  Description: Int
  Image: Int
  customers: Int
  newsfeed: Int
  products: Int
  shorts: Int
}

type Space_aggregated_fields {
  id: Float
  sort: Float
}

input Space_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: string_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  Name: string_filter_operators
  Description: string_filter_operators
  Image: directus_files_filter
  customers: customers_Space_filter
  customers_func: count_function_filter_operators
  newsfeed: Space_newsfeed_filter
  newsfeed_func: count_function_filter_operators
  products: Space_products_filter
  products_func: count_function_filter_operators
  shorts: Space_shorts_filter
  shorts_func: count_function_filter_operators
  _and: [Space_filter]
  _or: [Space_filter]
}

type Space_mutated {
  key: ID!
  event: EventEnum
  data: Space
}

type Space_newsfeed {
  id: ID!
  Space_id(filter: Space_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): Space
  newsfeed_id(filter: newsfeed_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): newsfeed
}

type Space_newsfeed_aggregated {
  group: JSON
  countAll: Int
  count: Space_newsfeed_aggregated_count
  countDistinct: Space_newsfeed_aggregated_count
  avg: Space_newsfeed_aggregated_fields
  sum: Space_newsfeed_aggregated_fields
  avgDistinct: Space_newsfeed_aggregated_fields
  sumDistinct: Space_newsfeed_aggregated_fields
  min: Space_newsfeed_aggregated_fields
  max: Space_newsfeed_aggregated_fields
}

type Space_newsfeed_aggregated_count {
  id: Int
  Space_id: Int
  newsfeed_id: Int
}

type Space_newsfeed_aggregated_fields {
  id: Float
  Space_id: Float
  newsfeed_id: Float
}

input Space_newsfeed_filter {
  id: number_filter_operators
  Space_id: Space_filter
  newsfeed_id: newsfeed_filter
  _and: [Space_newsfeed_filter]
  _or: [Space_newsfeed_filter]
}

type Space_newsfeed_mutated {
  key: ID!
  event: EventEnum
  data: Space_newsfeed
}

type Space_products {
  id: ID!
  Space_id(filter: Space_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): Space
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type Space_products_aggregated {
  group: JSON
  countAll: Int
  count: Space_products_aggregated_count
  countDistinct: Space_products_aggregated_count
  avg: Space_products_aggregated_fields
  sum: Space_products_aggregated_fields
  avgDistinct: Space_products_aggregated_fields
  sumDistinct: Space_products_aggregated_fields
  min: Space_products_aggregated_fields
  max: Space_products_aggregated_fields
}

type Space_products_aggregated_count {
  id: Int
  Space_id: Int
  products_id: Int
}

type Space_products_aggregated_fields {
  id: Float
  Space_id: Float
  products_id: Float
}

input Space_products_filter {
  id: number_filter_operators
  Space_id: Space_filter
  products_id: products_filter
  _and: [Space_products_filter]
  _or: [Space_products_filter]
}

type Space_products_mutated {
  key: ID!
  event: EventEnum
  data: Space_products
}

type Space_shorts {
  id: ID!
  Space_id(filter: Space_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): Space
  shorts_id(filter: shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shorts
}

type Space_shorts_aggregated {
  group: JSON
  countAll: Int
  count: Space_shorts_aggregated_count
  countDistinct: Space_shorts_aggregated_count
  avg: Space_shorts_aggregated_fields
  sum: Space_shorts_aggregated_fields
  avgDistinct: Space_shorts_aggregated_fields
  sumDistinct: Space_shorts_aggregated_fields
  min: Space_shorts_aggregated_fields
  max: Space_shorts_aggregated_fields
}

type Space_shorts_aggregated_count {
  id: Int
  Space_id: Int
  shorts_id: Int
}

type Space_shorts_aggregated_fields {
  id: Float
  Space_id: Float
  shorts_id: Float
}

input Space_shorts_filter {
  id: number_filter_operators
  Space_id: Space_filter
  shorts_id: shorts_filter
  _and: [Space_shorts_filter]
  _or: [Space_shorts_filter]
}

type Space_shorts_mutated {
  key: ID!
  event: EventEnum
  data: Space_shorts
}

type special_discounts {
  id: ID!
  name: String!
  excerpt: String
  discount: Float
  image: String
  published: Date
  published_func: datetime_functions
  rewards: String
  coupons: String
  expiration: Date
  expiration_func: date_functions
  categories: String
  articles: String
  products: String
  customers: String
  users: String
}

type special_discounts_aggregated {
  group: JSON
  countAll: Int
  count: special_discounts_aggregated_count
  countDistinct: special_discounts_aggregated_count
  avg: special_discounts_aggregated_fields
  sum: special_discounts_aggregated_fields
  avgDistinct: special_discounts_aggregated_fields
  sumDistinct: special_discounts_aggregated_fields
  min: special_discounts_aggregated_fields
  max: special_discounts_aggregated_fields
}

type special_discounts_aggregated_count {
  id: Int
  name: Int
  excerpt: Int
  discount: Int
  image: Int
  published: Int
  rewards: Int
  coupons: Int
  expiration: Int
  categories: Int
  articles: Int
  products: Int
  customers: Int
  users: Int
}

type special_discounts_aggregated_fields {
  id: Float
  discount: Float
}

input special_discounts_filter {
  id: number_filter_operators
  name: string_filter_operators
  excerpt: string_filter_operators
  discount: number_filter_operators
  image: string_filter_operators
  published: date_filter_operators
  published_func: datetime_function_filter_operators
  rewards: string_filter_operators
  coupons: string_filter_operators
  expiration: date_filter_operators
  expiration_func: date_function_filter_operators
  categories: string_filter_operators
  articles: string_filter_operators
  products: string_filter_operators
  customers: string_filter_operators
  users: string_filter_operators
  _and: [special_discounts_filter]
  _or: [special_discounts_filter]
}

type special_discounts_mutated {
  key: ID!
  event: EventEnum
  data: special_discounts
}

type states {
  id: ID!
  name: String
  country_code: String
  fips_code: String
  iso2: String
  latitude: Float
  longitude: Float
  flag: Int
  wikiDataId: String
  country_id: String
  created_at: Date
  created_at_func: datetime_functions
  updated_at: Date
  updated_at_func: datetime_functions
  cities(filter: states_cities_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [states_cities]
  cities_func: count_functions
}

type states_aggregated {
  group: JSON
  countAll: Int
  count: states_aggregated_count
  countDistinct: states_aggregated_count
  avg: states_aggregated_fields
  sum: states_aggregated_fields
  avgDistinct: states_aggregated_fields
  sumDistinct: states_aggregated_fields
  min: states_aggregated_fields
  max: states_aggregated_fields
}

type states_aggregated_count {
  id: Int
  name: Int
  country_code: Int
  fips_code: Int
  iso2: Int
  latitude: Int
  longitude: Int
  flag: Int
  wikiDataId: Int
  country_id: Int
  created_at: Int
  updated_at: Int
  cities: Int
}

type states_aggregated_fields {
  id: Float
  latitude: Float
  longitude: Float
  flag: Float
}

type states_cities {
  id: ID!
  states_id(filter: states_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): states
  cities_id(filter: cities_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): cities
}

type states_cities_aggregated {
  group: JSON
  countAll: Int
  count: states_cities_aggregated_count
  countDistinct: states_cities_aggregated_count
  avg: states_cities_aggregated_fields
  sum: states_cities_aggregated_fields
  avgDistinct: states_cities_aggregated_fields
  sumDistinct: states_cities_aggregated_fields
  min: states_cities_aggregated_fields
  max: states_cities_aggregated_fields
}

type states_cities_aggregated_count {
  id: Int
  states_id: Int
  cities_id: Int
}

type states_cities_aggregated_fields {
  id: Float
  states_id: Float
  cities_id: Float
}

input states_cities_filter {
  id: number_filter_operators
  states_id: states_filter
  cities_id: cities_filter
  _and: [states_cities_filter]
  _or: [states_cities_filter]
}

type states_cities_mutated {
  key: ID!
  event: EventEnum
  data: states_cities
}

type states_countries {
  id: ID!
  countries_id(filter: countries_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): countries
}

type states_countries_aggregated {
  group: JSON
  countAll: Int
  count: states_countries_aggregated_count
  countDistinct: states_countries_aggregated_count
  avg: states_countries_aggregated_fields
  sum: states_countries_aggregated_fields
  avgDistinct: states_countries_aggregated_fields
  sumDistinct: states_countries_aggregated_fields
  min: states_countries_aggregated_fields
  max: states_countries_aggregated_fields
}

type states_countries_aggregated_count {
  id: Int
  countries_id: Int
}

type states_countries_aggregated_fields {
  id: Float
  countries_id: Float
}

input states_countries_filter {
  id: number_filter_operators
  countries_id: countries_filter
  _and: [states_countries_filter]
  _or: [states_countries_filter]
}

type states_countries_mutated {
  key: ID!
  event: EventEnum
  data: states_countries
}

input states_filter {
  id: number_filter_operators
  name: string_filter_operators
  country_code: string_filter_operators
  fips_code: string_filter_operators
  iso2: string_filter_operators
  latitude: number_filter_operators
  longitude: number_filter_operators
  flag: number_filter_operators
  wikiDataId: string_filter_operators
  country_id: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  updated_at: date_filter_operators
  updated_at_func: datetime_function_filter_operators
  cities: states_cities_filter
  cities_func: count_function_filter_operators
  _and: [states_filter]
  _or: [states_filter]
}

type states_mutated {
  key: ID!
  event: EventEnum
  data: states
}

input string_filter_operators {
  _eq: String
  _neq: String
  _contains: String
  _icontains: String
  _ncontains: String
  _starts_with: String
  _nstarts_with: String
  _istarts_with: String
  _nistarts_with: String
  _ends_with: String
  _nends_with: String
  _iends_with: String
  _niends_with: String
  _in: [String]
  _nin: [String]
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

type Subscription {
  products_categories_mutated(event: EventEnum): products_categories_mutated
  directus_files_mutated(event: EventEnum): directus_files_mutated
  directus_folders_mutated(event: EventEnum): directus_folders_mutated
  customers_mutated(event: EventEnum): customers_mutated
  brands_departments_mutated(event: EventEnum): brands_departments_mutated
  pages_mutated(event: EventEnum): pages_mutated
  products_countries_mutated(event: EventEnum): products_countries_mutated
  Space_newsfeed_mutated(event: EventEnum): Space_newsfeed_mutated
  brands_customers_mutated(event: EventEnum): brands_customers_mutated
  categories_mutated(event: EventEnum): categories_mutated
  newsletters_customers_mutated(event: EventEnum): newsletters_customers_mutated
  brands_shorts_mutated(event: EventEnum): brands_shorts_mutated
  Space_products_mutated(event: EventEnum): Space_products_mutated
  Space_shorts_mutated(event: EventEnum): Space_shorts_mutated
  categories_departments_mutated(event: EventEnum): categories_departments_mutated
  products_manufacturer_mutated(event: EventEnum): products_manufacturer_mutated
  categories_shorts_mutated(event: EventEnum): categories_shorts_mutated
  categories_meeovistores_mutated(event: EventEnum): categories_meeovistores_mutated
  lists_customers_mutated(event: EventEnum): lists_customers_mutated
  categories_customers_mutated(event: EventEnum): categories_customers_mutated
  reviews_customers_mutated(event: EventEnum): reviews_customers_mutated
  reviews_products_mutated(event: EventEnum): reviews_products_mutated
  lists_products_mutated(event: EventEnum): lists_products_mutated
  shops_categories_mutated(event: EventEnum): shops_categories_mutated
  tags_mutated(event: EventEnum): tags_mutated
  tags_products_mutated(event: EventEnum): tags_products_mutated
  articles_mutated(event: EventEnum): articles_mutated
  products_departments_mutated(event: EventEnum): products_departments_mutated
  products_websites_mutated(event: EventEnum): products_websites_mutated
  agreements_mutated(event: EventEnum): agreements_mutated
  brands_mutated(event: EventEnum): brands_mutated
  products_products_mutated(event: EventEnum): products_products_mutated
  cities_states_mutated(event: EventEnum): cities_states_mutated
  cities_mutated(event: EventEnum): cities_mutated
  musicchart_customers_mutated(event: EventEnum): musicchart_customers_mutated
  states_countries_mutated(event: EventEnum): states_countries_mutated
  cities_countries_mutated(event: EventEnum): cities_countries_mutated
  attributes_products_mutated(event: EventEnum): attributes_products_mutated
  collections_mutated(event: EventEnum): collections_mutated
  coupons_mutated(event: EventEnum): coupons_mutated
  comments_mutated(event: EventEnum): comments_mutated
  musicchart_products_mutated(event: EventEnum): musicchart_products_mutated
  currency_mutated(event: EventEnum): currency_mutated
  tags_categories_mutated(event: EventEnum): tags_categories_mutated
  cities_customers_mutated(event: EventEnum): cities_customers_mutated
  articles_comments_mutated(event: EventEnum): articles_comments_mutated
  shops_customers_mutated(event: EventEnum): shops_customers_mutated
  websites_customers_mutated(event: EventEnum): websites_customers_mutated
  musicchart_categories_mutated(event: EventEnum): musicchart_categories_mutated
  product_types_products_mutated(event: EventEnum): product_types_products_mutated
  articles_categories_mutated(event: EventEnum): articles_categories_mutated
  shops_newsfeed_mutated(event: EventEnum): shops_newsfeed_mutated
  articles_departments_mutated(event: EventEnum): articles_departments_mutated
  meeovistores_customers_mutated(event: EventEnum): meeovistores_customers_mutated
  collections_products_mutated(event: EventEnum): collections_products_mutated
  collections_brands_mutated(event: EventEnum): collections_brands_mutated
  manufacturer_mutated(event: EventEnum): manufacturer_mutated
  brands_products_mutated(event: EventEnum): brands_products_mutated
  collections_customers_mutated(event: EventEnum): collections_customers_mutated
  meeovistores_mutated(event: EventEnum): meeovistores_mutated
  meeovistores_collections_mutated(event: EventEnum): meeovistores_collections_mutated
  lists_mutated(event: EventEnum): lists_mutated
  meeovistores_products_mutated(event: EventEnum): meeovistores_products_mutated
  helpq_mutated(event: EventEnum): helpq_mutated
  meeovistores_websites_mutated(event: EventEnum): meeovistores_websites_mutated
  newsfeed_customers_mutated(event: EventEnum): newsfeed_customers_mutated
  comments_customers_mutated(event: EventEnum): comments_customers_mutated
  brands_manufacturer_mutated(event: EventEnum): brands_manufacturer_mutated
  comments_shorts_mutated(event: EventEnum): comments_shorts_mutated
  shorts_mutated(event: EventEnum): shorts_mutated
  comments_products_mutated(event: EventEnum): comments_products_mutated
  brands_categories_mutated(event: EventEnum): brands_categories_mutated
  newsfeed_products_mutated(event: EventEnum): newsfeed_products_mutated
  helpa_mutated(event: EventEnum): helpa_mutated
  coupons_customers_mutated(event: EventEnum): coupons_customers_mutated
  product_types_mutated(event: EventEnum): product_types_mutated
  tags_shorts_mutated(event: EventEnum): tags_shorts_mutated
  shops_mutated(event: EventEnum): shops_mutated
  customers_Space_mutated(event: EventEnum): customers_Space_mutated
  shops_agreements_mutated(event: EventEnum): shops_agreements_mutated
  customers_shorts_mutated(event: EventEnum): customers_shorts_mutated
  coupons_products_mutated(event: EventEnum): coupons_products_mutated
  tags_departments_mutated(event: EventEnum): tags_departments_mutated
  countries_mutated(event: EventEnum): countries_mutated
  shops_products_mutated(event: EventEnum): shops_products_mutated
  products_mutated(event: EventEnum): products_mutated
  products_helpa_mutated(event: EventEnum): products_helpa_mutated
  translations_mutated(event: EventEnum): translations_mutated
  translations_products_mutated(event: EventEnum): translations_products_mutated
  customers_products_mutated(event: EventEnum): customers_products_mutated
  rewards_mutated(event: EventEnum): rewards_mutated
  departments_customers_mutated(event: EventEnum): departments_customers_mutated
  departments_shorts_mutated(event: EventEnum): departments_shorts_mutated
  shipments_mutated(event: EventEnum): shipments_mutated
  special_discounts_mutated(event: EventEnum): special_discounts_mutated
  departments_collections_mutated(event: EventEnum): departments_collections_mutated
  digiboard_comments_mutated(event: EventEnum): digiboard_comments_mutated
  departments_categories_mutated(event: EventEnum): departments_categories_mutated
  digiboard_customers_mutated(event: EventEnum): digiboard_customers_mutated
  warehouse_mutated(event: EventEnum): warehouse_mutated
  shops_departments_mutated(event: EventEnum): shops_departments_mutated
  currencies_countries_mutated(event: EventEnum): currencies_countries_mutated
  websites_mutated(event: EventEnum): websites_mutated
  shops_files_mutated(event: EventEnum): shops_files_mutated
  musicchart_mutated(event: EventEnum): musicchart_mutated
  currency_departments_mutated(event: EventEnum): currency_departments_mutated
  currency_customers_mutated(event: EventEnum): currency_customers_mutated
  tags_articles_mutated(event: EventEnum): tags_articles_mutated
  attributes_mutated(event: EventEnum): attributes_mutated
  departments_mutated(event: EventEnum): departments_mutated
  shorts_products_mutated(event: EventEnum): shorts_products_mutated
  digiboard_categories_mutated(event: EventEnum): digiboard_categories_mutated
  digiboard_mutated(event: EventEnum): digiboard_mutated
  newsletters_mutated(event: EventEnum): newsletters_mutated
  Space_mutated(event: EventEnum): Space_mutated
  newsfeed_mutated(event: EventEnum): newsfeed_mutated
  agreements_customers_mutated(event: EventEnum): agreements_customers_mutated
  agreements_products_mutated(event: EventEnum): agreements_products_mutated
  translations_customers_mutated(event: EventEnum): translations_customers_mutated
  translations_departments_mutated(event: EventEnum): translations_departments_mutated
  translations_meeovistores_mutated(event: EventEnum): translations_meeovistores_mutated
  articles_customers_mutated(event: EventEnum): articles_customers_mutated
  translations_websites_mutated(event: EventEnum): translations_websites_mutated
  careers_mutated(event: EventEnum): careers_mutated
  states_cities_mutated(event: EventEnum): states_cities_mutated
  careers_customers_mutated(event: EventEnum): careers_customers_mutated
  states_mutated(event: EventEnum): states_mutated
}

type tags {
  id: ID!
  status: String
  sort: Int
  date_created: Date
  date_created_func: datetime_functions
  name: String
  description: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  articles(filter: tags_articles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_articles]
  articles_func: count_functions
  categories(filter: tags_categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_categories]
  categories_func: count_functions
  products(filter: tags_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_products]
  products_func: count_functions
  departments(filter: tags_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_departments]
  departments_func: count_functions
  shorts(filter: tags_shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [tags_shorts]
  shorts_func: count_functions
}

type tags_aggregated {
  group: JSON
  countAll: Int
  count: tags_aggregated_count
  countDistinct: tags_aggregated_count
  avg: tags_aggregated_fields
  sum: tags_aggregated_fields
  avgDistinct: tags_aggregated_fields
  sumDistinct: tags_aggregated_fields
  min: tags_aggregated_fields
  max: tags_aggregated_fields
}

type tags_aggregated_count {
  id: Int
  status: Int
  sort: Int
  date_created: Int
  name: Int
  description: Int
  image: Int
  articles: Int
  categories: Int
  products: Int
  departments: Int
  shorts: Int
}

type tags_aggregated_fields {
  id: Float
  sort: Float
}

type tags_articles {
  id: ID!
  tags_id(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): tags
  articles_id(filter: articles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): articles
}

type tags_articles_aggregated {
  group: JSON
  countAll: Int
  count: tags_articles_aggregated_count
  countDistinct: tags_articles_aggregated_count
  avg: tags_articles_aggregated_fields
  sum: tags_articles_aggregated_fields
  avgDistinct: tags_articles_aggregated_fields
  sumDistinct: tags_articles_aggregated_fields
  min: tags_articles_aggregated_fields
  max: tags_articles_aggregated_fields
}

type tags_articles_aggregated_count {
  id: Int
  tags_id: Int
  articles_id: Int
}

type tags_articles_aggregated_fields {
  id: Float
  tags_id: Float
  articles_id: Float
}

input tags_articles_filter {
  id: number_filter_operators
  tags_id: tags_filter
  articles_id: articles_filter
  _and: [tags_articles_filter]
  _or: [tags_articles_filter]
}

type tags_articles_mutated {
  key: ID!
  event: EventEnum
  data: tags_articles
}

type tags_categories {
  id: ID!
  tags_id(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): tags
  categories_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
}

type tags_categories_aggregated {
  group: JSON
  countAll: Int
  count: tags_categories_aggregated_count
  countDistinct: tags_categories_aggregated_count
  avg: tags_categories_aggregated_fields
  sum: tags_categories_aggregated_fields
  avgDistinct: tags_categories_aggregated_fields
  sumDistinct: tags_categories_aggregated_fields
  min: tags_categories_aggregated_fields
  max: tags_categories_aggregated_fields
}

type tags_categories_aggregated_count {
  id: Int
  tags_id: Int
  categories_id: Int
}

type tags_categories_aggregated_fields {
  id: Float
  tags_id: Float
  categories_id: Float
}

input tags_categories_filter {
  id: number_filter_operators
  tags_id: tags_filter
  categories_id: categories_filter
  _and: [tags_categories_filter]
  _or: [tags_categories_filter]
}

type tags_categories_mutated {
  key: ID!
  event: EventEnum
  data: tags_categories
}

type tags_departments {
  id: ID!
  tags_id(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): tags
  departments_id(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): departments
}

type tags_departments_aggregated {
  group: JSON
  countAll: Int
  count: tags_departments_aggregated_count
  countDistinct: tags_departments_aggregated_count
  avg: tags_departments_aggregated_fields
  sum: tags_departments_aggregated_fields
  avgDistinct: tags_departments_aggregated_fields
  sumDistinct: tags_departments_aggregated_fields
  min: tags_departments_aggregated_fields
  max: tags_departments_aggregated_fields
}

type tags_departments_aggregated_count {
  id: Int
  tags_id: Int
  departments_id: Int
}

type tags_departments_aggregated_fields {
  id: Float
  tags_id: Float
  departments_id: Float
}

input tags_departments_filter {
  id: number_filter_operators
  tags_id: tags_filter
  departments_id: departments_filter
  _and: [tags_departments_filter]
  _or: [tags_departments_filter]
}

type tags_departments_mutated {
  key: ID!
  event: EventEnum
  data: tags_departments
}

input tags_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  image: directus_files_filter
  articles: tags_articles_filter
  articles_func: count_function_filter_operators
  categories: tags_categories_filter
  categories_func: count_function_filter_operators
  products: tags_products_filter
  products_func: count_function_filter_operators
  departments: tags_departments_filter
  departments_func: count_function_filter_operators
  shorts: tags_shorts_filter
  shorts_func: count_function_filter_operators
  _and: [tags_filter]
  _or: [tags_filter]
}

type tags_mutated {
  key: ID!
  event: EventEnum
  data: tags
}

type tags_products {
  id: ID!
  tags_id(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): tags
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type tags_products_aggregated {
  group: JSON
  countAll: Int
  count: tags_products_aggregated_count
  countDistinct: tags_products_aggregated_count
  avg: tags_products_aggregated_fields
  sum: tags_products_aggregated_fields
  avgDistinct: tags_products_aggregated_fields
  sumDistinct: tags_products_aggregated_fields
  min: tags_products_aggregated_fields
  max: tags_products_aggregated_fields
}

type tags_products_aggregated_count {
  id: Int
  tags_id: Int
  products_id: Int
}

type tags_products_aggregated_fields {
  id: Float
  tags_id: Float
  products_id: Float
}

input tags_products_filter {
  id: number_filter_operators
  tags_id: tags_filter
  products_id: products_filter
  _and: [tags_products_filter]
  _or: [tags_products_filter]
}

type tags_products_mutated {
  key: ID!
  event: EventEnum
  data: tags_products
}

type tags_shorts {
  id: ID!
  tags_id(filter: tags_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): tags
  shorts_id(filter: shorts_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): shorts
}

type tags_shorts_aggregated {
  group: JSON
  countAll: Int
  count: tags_shorts_aggregated_count
  countDistinct: tags_shorts_aggregated_count
  avg: tags_shorts_aggregated_fields
  sum: tags_shorts_aggregated_fields
  avgDistinct: tags_shorts_aggregated_fields
  sumDistinct: tags_shorts_aggregated_fields
  min: tags_shorts_aggregated_fields
  max: tags_shorts_aggregated_fields
}

type tags_shorts_aggregated_count {
  id: Int
  tags_id: Int
  shorts_id: Int
}

type tags_shorts_aggregated_fields {
  id: Float
  tags_id: Float
  shorts_id: Float
}

input tags_shorts_filter {
  id: number_filter_operators
  tags_id: tags_filter
  shorts_id: shorts_filter
  _and: [tags_shorts_filter]
  _or: [tags_shorts_filter]
}

type tags_shorts_mutated {
  key: ID!
  event: EventEnum
  data: tags_shorts
}

type translations {
  id: ID!
  status: String
  sort: Int
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  url: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  code: String
  websites(filter: translations_websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_websites]
  websites_func: count_functions
  products(filter: translations_products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_products]
  products_func: count_functions
  customers(filter: translations_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_customers]
  customers_func: count_functions
  departments(filter: translations_departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_departments]
  departments_func: count_functions
  meeovistores(filter: translations_meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_meeovistores]
  meeovistores_func: count_functions
}

type translations_aggregated {
  group: JSON
  countAll: Int
  count: translations_aggregated_count
  countDistinct: translations_aggregated_count
  avg: translations_aggregated_fields
  sum: translations_aggregated_fields
  avgDistinct: translations_aggregated_fields
  sumDistinct: translations_aggregated_fields
  min: translations_aggregated_fields
  max: translations_aggregated_fields
}

type translations_aggregated_count {
  id: Int
  status: Int
  sort: Int
  date_created: Int
  date_updated: Int
  name: Int
  url: Int
  image: Int
  code: Int
  websites: Int
  products: Int
  customers: Int
  departments: Int
  meeovistores: Int
}

type translations_aggregated_fields {
  id: Float
  sort: Float
}

type translations_customers {
  id: ID!
  translations_id(filter: translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): translations
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type translations_customers_aggregated {
  group: JSON
  countAll: Int
  count: translations_customers_aggregated_count
  countDistinct: translations_customers_aggregated_count
  avg: translations_customers_aggregated_fields
  sum: translations_customers_aggregated_fields
  avgDistinct: translations_customers_aggregated_fields
  sumDistinct: translations_customers_aggregated_fields
  min: translations_customers_aggregated_fields
  max: translations_customers_aggregated_fields
}

type translations_customers_aggregated_count {
  id: Int
  translations_id: Int
  customers_id: Int
}

type translations_customers_aggregated_fields {
  id: Float
  translations_id: Float
  customers_id: Float
}

input translations_customers_filter {
  id: number_filter_operators
  translations_id: translations_filter
  customers_id: customers_filter
  _and: [translations_customers_filter]
  _or: [translations_customers_filter]
}

type translations_customers_mutated {
  key: ID!
  event: EventEnum
  data: translations_customers
}

type translations_departments {
  id: ID!
  translations_id(filter: translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): translations
  departments_id(filter: departments_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): departments
}

type translations_departments_aggregated {
  group: JSON
  countAll: Int
  count: translations_departments_aggregated_count
  countDistinct: translations_departments_aggregated_count
  avg: translations_departments_aggregated_fields
  sum: translations_departments_aggregated_fields
  avgDistinct: translations_departments_aggregated_fields
  sumDistinct: translations_departments_aggregated_fields
  min: translations_departments_aggregated_fields
  max: translations_departments_aggregated_fields
}

type translations_departments_aggregated_count {
  id: Int
  translations_id: Int
  departments_id: Int
}

type translations_departments_aggregated_fields {
  id: Float
  translations_id: Float
  departments_id: Float
}

input translations_departments_filter {
  id: number_filter_operators
  translations_id: translations_filter
  departments_id: departments_filter
  _and: [translations_departments_filter]
  _or: [translations_departments_filter]
}

type translations_departments_mutated {
  key: ID!
  event: EventEnum
  data: translations_departments
}

input translations_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  url: string_filter_operators
  image: directus_files_filter
  code: string_filter_operators
  websites: translations_websites_filter
  websites_func: count_function_filter_operators
  products: translations_products_filter
  products_func: count_function_filter_operators
  customers: translations_customers_filter
  customers_func: count_function_filter_operators
  departments: translations_departments_filter
  departments_func: count_function_filter_operators
  meeovistores: translations_meeovistores_filter
  meeovistores_func: count_function_filter_operators
  _and: [translations_filter]
  _or: [translations_filter]
}

type translations_meeovistores {
  id: ID!
  translations_id(filter: translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): translations
  meeovistores_id(filter: meeovistores_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): meeovistores
}

type translations_meeovistores_aggregated {
  group: JSON
  countAll: Int
  count: translations_meeovistores_aggregated_count
  countDistinct: translations_meeovistores_aggregated_count
  avg: translations_meeovistores_aggregated_fields
  sum: translations_meeovistores_aggregated_fields
  avgDistinct: translations_meeovistores_aggregated_fields
  sumDistinct: translations_meeovistores_aggregated_fields
  min: translations_meeovistores_aggregated_fields
  max: translations_meeovistores_aggregated_fields
}

type translations_meeovistores_aggregated_count {
  id: Int
  translations_id: Int
  meeovistores_id: Int
}

type translations_meeovistores_aggregated_fields {
  id: Float
  translations_id: Float
  meeovistores_id: Float
}

input translations_meeovistores_filter {
  id: number_filter_operators
  translations_id: translations_filter
  meeovistores_id: meeovistores_filter
  _and: [translations_meeovistores_filter]
  _or: [translations_meeovistores_filter]
}

type translations_meeovistores_mutated {
  key: ID!
  event: EventEnum
  data: translations_meeovistores
}

type translations_mutated {
  key: ID!
  event: EventEnum
  data: translations
}

type translations_products {
  id: ID!
  translations_id(filter: translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): translations
  products_id(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
}

type translations_products_aggregated {
  group: JSON
  countAll: Int
  count: translations_products_aggregated_count
  countDistinct: translations_products_aggregated_count
  avg: translations_products_aggregated_fields
  sum: translations_products_aggregated_fields
  avgDistinct: translations_products_aggregated_fields
  sumDistinct: translations_products_aggregated_fields
  min: translations_products_aggregated_fields
  max: translations_products_aggregated_fields
}

type translations_products_aggregated_count {
  id: Int
  translations_id: Int
  products_id: Int
}

type translations_products_aggregated_fields {
  id: Float
  translations_id: Float
  products_id: Float
}

input translations_products_filter {
  id: number_filter_operators
  translations_id: translations_filter
  products_id: products_filter
  _and: [translations_products_filter]
  _or: [translations_products_filter]
}

type translations_products_mutated {
  key: ID!
  event: EventEnum
  data: translations_products
}

type translations_websites {
  id: ID!
  translations_id(filter: translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): translations
  websites_id(filter: websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): websites
}

type translations_websites_aggregated {
  group: JSON
  countAll: Int
  count: translations_websites_aggregated_count
  countDistinct: translations_websites_aggregated_count
  avg: translations_websites_aggregated_fields
  sum: translations_websites_aggregated_fields
  avgDistinct: translations_websites_aggregated_fields
  sumDistinct: translations_websites_aggregated_fields
  min: translations_websites_aggregated_fields
  max: translations_websites_aggregated_fields
}

type translations_websites_aggregated_count {
  id: Int
  translations_id: Int
  websites_id: Int
}

type translations_websites_aggregated_fields {
  id: Float
  translations_id: Float
  websites_id: Float
}

input translations_websites_filter {
  id: number_filter_operators
  translations_id: translations_filter
  websites_id: websites_filter
  _and: [translations_websites_filter]
  _or: [translations_websites_filter]
}

type translations_websites_mutated {
  key: ID!
  event: EventEnum
  data: translations_websites
}

input update_articles_input {
  id: ID
  name: String
  excerpt: String
  content: String
  created_at: Date
  image: String
  type: JSON
  isPublic: Boolean
}

input update_brands_input {
  id: ID
  created_at: Date
  code: String
  name: String
  description: String
  image: String
}

input update_collections_input {
  id: ID
  created_at: Date
  name: String
  description: String
  image: String
  type: JSON
}

input update_comments_input {
  id: ID
  response: String
  media: String
}

input update_coupons_input {
  id: ID
  name: String
  excerpt: String
  discount: Int
  image: String
  expiration: Date
}

input update_customers_input {
  id: ID
  name_prefix: String
  first_name: String
  middle_name: String
  last_name: String
  email: String
  phone: String
  zipcode: String
  name_suffix: String
  tax_vat_number: String
  description: String
  Address: String
  username: String
  password: String
  payment: String
  dateofbirth: Date
  image: String
  gender: String
  type: [String]
}

input update_digiboard_input {
  id: ID
  name: String
  board: String
  created_at: Date
  image: String
}

input update_helpa_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  message: String
  question_id: update_helpq_input
  products: [update_products_helpa_input]
}

input update_helpq_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  subject: String
  answer_id: String
}

input update_lists_input {
  id: ID
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  name: String
  description: String
  image: String
  type: String
}

input update_manufacturer_input {
  id: ID
  created_at: Date
  code: String
  name: String
  description: String
  isPublic: Boolean
  image: String
}

input update_musicchart_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  name: String
  description: String
  image: String
}

input update_newsfeed_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  post: String
  image: String
}

input update_products_helpa_input {
  id: ID
  products_id: update_products_input
  helpa_id: update_helpa_input
}

input update_products_input {
  id: ID
  sku: GraphQLBigInt
  name: String
  tax_class: String
  stock_status: String
  weight: String
  created_at: Date
  height: String
  content: String
  part_number: String
  format: JSON
  file: String
  image: String
  type: String
  visibility: Boolean
  price: Float
  size: JSON
  rating: String
  faqsa: [update_products_helpa_input]
}

input update_rewards_input {
  id: ID
  name: String
  slug: String
  level: String
  created_at: Date
  coupons: String
  expiration: String
  categories: String
  articles: String
  products: String
  customers: String
  users: String
}

input update_shipments_input {
  product: String
  speed_grade: String
  ship_date: Date
  carrier_name: String
  transit_time: String
  tracking_url: String
  image: String
  id: ID
  client_id: String
  client_secret: String
  country: String
  website: String
}

input update_shops_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  name: String
  content: String
  website: String
}

input update_shorts_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  name: String
  description: String
  video: String
}

input update_Space_input {
  id: ID
  status: String
  sort: Int
  user_created: String
  date_created: Date
  user_updated: String
  date_updated: Date
  Name: String
  Description: String
  Image: String
}

input update_tags_input {
  id: ID
  status: String
  sort: Int
  date_created: Date
  name: String
  description: String
  image: String
}

input update_warehouse_input {
  id: ID
  created_at: Date
  name: String
  description: String
  city: String
  state: String
  country: String
  postal: String
  status: String
  image: String
  products: String
  category: String
  isPublic: String
}

input update_websites_input {
  id: ID
  created_at: Date
  name: String
  url: String
  image: String
  type: String
}

type warehouse {
  id: ID!
  created_at: Date
  created_at_func: datetime_functions
  name: String
  description: String
  city: String
  state: String
  country: String
  postal: String
  status: String
  image: String
  products: String
  category: String
  isPublic: String
}

type warehouse_aggregated {
  group: JSON
  countAll: Int
  count: warehouse_aggregated_count
  countDistinct: warehouse_aggregated_count
}

type warehouse_aggregated_count {
  id: Int
  created_at: Int
  name: Int
  description: Int
  city: Int
  state: Int
  country: Int
  postal: Int
  status: Int
  image: Int
  products: Int
  category: Int
  isPublic: Int
}

input warehouse_filter {
  id: number_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  city: string_filter_operators
  state: string_filter_operators
  country: string_filter_operators
  postal: string_filter_operators
  status: string_filter_operators
  image: string_filter_operators
  products: string_filter_operators
  category: string_filter_operators
  isPublic: string_filter_operators
  _and: [warehouse_filter]
  _or: [warehouse_filter]
}

type warehouse_mutated {
  key: ID!
  event: EventEnum
  data: warehouse
}

type websites {
  id: ID!
  created_at: Date
  created_at_func: datetime_functions
  name: String
  url: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  type: String
  customers(filter: websites_customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [websites_customers]
  customers_func: count_functions
  products(filter: products_websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products_websites]
  products_func: count_functions
  meeovistores(filter: meeovistores_websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [meeovistores_websites]
  meeovistores_func: count_functions
  translations(filter: translations_websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [translations_websites]
  translations_func: count_functions
}

type websites_aggregated {
  group: JSON
  countAll: Int
  count: websites_aggregated_count
  countDistinct: websites_aggregated_count
}

type websites_aggregated_count {
  id: Int
  created_at: Int
  name: Int
  url: Int
  image: Int
  type: Int
  customers: Int
  products: Int
  meeovistores: Int
  translations: Int
}

type websites_customers {
  id: ID!
  websites_id(filter: websites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): websites
  customers_id(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
}

type websites_customers_aggregated {
  group: JSON
  countAll: Int
  count: websites_customers_aggregated_count
  countDistinct: websites_customers_aggregated_count
  avg: websites_customers_aggregated_fields
  sum: websites_customers_aggregated_fields
  avgDistinct: websites_customers_aggregated_fields
  sumDistinct: websites_customers_aggregated_fields
  min: websites_customers_aggregated_fields
  max: websites_customers_aggregated_fields
}

type websites_customers_aggregated_count {
  id: Int
  websites_id: Int
  customers_id: Int
}

type websites_customers_aggregated_fields {
  id: Float
  websites_id: Float
  customers_id: Float
}

input websites_customers_filter {
  id: number_filter_operators
  websites_id: websites_filter
  customers_id: customers_filter
  _and: [websites_customers_filter]
  _or: [websites_customers_filter]
}

type websites_customers_mutated {
  key: ID!
  event: EventEnum
  data: websites_customers
}

input websites_filter {
  id: number_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  name: string_filter_operators
  url: string_filter_operators
  image: directus_files_filter
  type: string_filter_operators
  customers: websites_customers_filter
  customers_func: count_function_filter_operators
  products: products_websites_filter
  products_func: count_function_filter_operators
  meeovistores: meeovistores_websites_filter
  meeovistores_func: count_function_filter_operators
  translations: translations_websites_filter
  translations_func: count_function_filter_operators
  _and: [websites_filter]
  _or: [websites_filter]
}

type websites_mutated {
  key: ID!
  event: EventEnum
  data: websites
}

